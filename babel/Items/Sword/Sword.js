// File generated with Tower of Babel version: 5.3-beta on 07/08/17
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Sword;
(function (Sword) {
    var _B = BABYLON;
    var _M = _B.Matrix.FromValues;
    var _Q = _B.Quaternion;
    var _V = _B.Vector3;
    function CONTIG(array, offset, begin, end) {
        for(var i = 0, len = 1 + end - begin; i < len; i++) {
            array[offset + i] = begin + i;
        }
    }
    function REPEAT(array, offset, nRepeats, val) {
        for(var i = 0; i < nRepeats; i++) {
            array[offset + i] = val;
        }
    }
    var _sceneTransitionName;
    var _overriddenMillis;
    var _overriddenSound;
    var _options;

    function initScene(scene, resourcesRootDir, positionOffset, sceneTransitionName, overriddenMillis, overriddenSound, options) {
        if (!resourcesRootDir) { resourcesRootDir = "./"; }
        function MOVE(mesh, positionOffset) {
            mesh.position.addInPlace(positionOffset);
            if (mesh.isWorldMatrixFrozen) mesh.freezeWorldMatrix();
        }

        _sceneTransitionName = sceneTransitionName;
        _overriddenMillis    = overriddenMillis;
        _overriddenSound     = overriddenSound;
        _options             = options;

        scene.autoClear = true;
        scene.clearColor    = new _B.Color3(.0509,.0509,.0509);
        scene.ambientColor  = new _B.Color3(0,0,0);
        scene.gravity = new _V(0,-9.81,0);

        // define materials before meshes
        defineMaterials(scene, resourcesRootDir);

        // instance all root meshes
        var mesh;
        if (typeof (TOWER_OF_BABEL) !== 'undefined'){
            TOWER_OF_BABEL.MeshFactory.MODULES.push(new MeshFactory(scene));
            mesh = TOWER_OF_BABEL.MeshFactory.instance("Sword", "Sword", true);
            if (positionOffset) MOVE(mesh, positionOffset);
        } else {
            mesh = new Sword("Sword", scene);
            if (positionOffset) MOVE(mesh, positionOffset);
        }
    }
    Sword.initScene = initScene;
    var meshLib = new Array(1);
    var cloneCount = 1;

    var originalVerts = 0;
    var clonedVerts = 0;
    var MeshFactory = (function () {
        function MeshFactory(_scene, materialsRootDir) {
            this._scene = _scene;
            if (!materialsRootDir) { materialsRootDir = "./"; }
            defineMaterials(_scene, materialsRootDir); //embedded version check
        }

        MeshFactory.prototype.getModuleName = function () { return "Sword";};

        MeshFactory.prototype.instance = function (meshName, cloneSkeleton) {
            var ret = null;
            var src;
            switch (meshName){
                case "Sword":
                    src = getViable(0);
                    if (src === null){
                        ret = new Sword("Sword", this._scene);
                        originalVerts += ret.getTotalVertices();
                        meshLib[0].push(ret);
                    }else{
                        ret = new Sword("Sword" + "_" + cloneCount++, this._scene, null, src);
                        clonedVerts += ret.getTotalVertices();
                    }
                    break;
            }
            if (ret !== null){
                if (cloneSkeleton && src && src.skeleton){
                    var skelName = src.skeleton.name + cloneCount;
                    ret.skeleton = src.skeleton.clone(skelName, skelName);
                }
            }
            else _B.Tools.Error("Mesh not found: " + meshName);
            return ret;
        };
        return MeshFactory;
    })();
    Sword.MeshFactory = MeshFactory;
    function getViable(libIdx, isNode) {
        var meshes = meshLib[libIdx];
        if (!meshes || meshes === null){
            if (!meshes) meshLib[libIdx] = new Array();
            return null;
        }

        for (var i = meshes.length - 1; i >= 0; i--){
            if (meshes[i].geometry || isNode) return meshes[i];
        }
        return null;
    }

    function clean(libIdx) {
        var meshes = meshLib[libIdx];
        if (!meshes  || meshes === null) return;

        var stillViable = false;
        for (var i = meshes.length - 1; i >= 0; i--){
            if (!meshes[i].geometry) meshes[i] = null;
            else stillViable = true;
        }
        if (!stillViable) meshLib[libIdx] = null;
    }

    function getStats() { return [cloneCount, originalVerts, clonedVerts]; }
    Sword.getStats = getStats;


    var waitingMeshes = [];
    var pendingTextures = 0;
    var texLoadStart = 0;
    function onTexturesLoaded(){
        if (--pendingTextures > 0) return;
        _B.Tools.Log("Texture Load delay:  " + ((_B.Tools.Now - texLoadStart) / 1000).toFixed(2) + " secs");
        if (_sceneTransitionName) QI.SceneTransition.perform(_sceneTransitionName, waitingMeshes, _overriddenMillis, _overriddenSound, _options);
        else {
            for (var i = 0, len = waitingMeshes.length; i < len; i++) {
                if (typeof waitingMeshes[i].grandEntrance == "function") waitingMeshes[i].grandEntrance();
                else makeVisible(waitingMeshes[i]);
            }
        }
        waitingMeshes = [];
        _sceneTransitionName = null;
        matLoaded = true;
    }

    // QI.Mesh has similar method, using this to not require QI
    function makeVisible(mesh){
        var children = mesh.getChildMeshes();
        mesh.isVisible = true;
        for (var i = 0, len = children.length; i < len; i++) {
            children[i].isVisible = true;
        }
    }

    var aheadQueued = false;
    function matReadAhead(materialsRootDir) {
        if (aheadQueued) return;
        var txBuffer;
        var fName;

        aheadQueued = true;
    }
    Sword.matReadAhead = matReadAhead;

    var matLoaded = false;
    function defineMaterials(scene, materialsRootDir) {
        if (!materialsRootDir) { materialsRootDir = "./"; }
        if (materialsRootDir.lastIndexOf("/") + 1  !== materialsRootDir.length) { materialsRootDir  += "/"; }
        if (QI) QI.TimelineControl.initialize(scene);
        TOWER_OF_BABEL.Preloader.SCENE = scene;
        var loadStart = _B.Tools.Now;
        matReadAhead(materialsRootDir);
        var material;
        var texture;
        var txBuffer;

        material = scene.getMaterialByID("Sword.Material");
        if (!material){
            material = new _B.StandardMaterial("Sword.Material", scene);
            material.ambientColor  = new _B.Color3(.6038,.6038,.6038);
            material.diffuseColor  = new _B.Color3(.4831,.4831,.4831);
            material.emissiveColor = new _B.Color3(.2415,.2415,.2415);
            material.specularColor = new _B.Color3(.5,.5,.5);
            material.specularPower = 50;
            material.alpha =  1;
            material.backFaceCulling = true;
            material.checkReadyOnlyOnce = false;
            material.maxSimultaneousLights = 4;
        } else material.markDirty();

        material = scene.getMaterialByID("Sword.Material.001");
        if (!material){
            material = new _B.StandardMaterial("Sword.Material.001", scene);
            material.ambientColor  = new _B.Color3(.047,.0179,.0084);
            material.diffuseColor  = new _B.Color3(.0376,.0143,.0067);
            material.emissiveColor = new _B.Color3(.0193,.0073,.0034);
            material.specularColor = new _B.Color3(0,0,0);
            material.specularPower = 50;
            material.alpha =  1;
            material.backFaceCulling = true;
            material.checkReadyOnlyOnce = false;
            material.maxSimultaneousLights = 4;
        } else material.markDirty();

        material = scene.getMaterialByID("Sword.Material.002");
        if (!material){
            material = new _B.StandardMaterial("Sword.Material.002", scene);
            material.ambientColor  = new _B.Color3(.8,.8,.8);
            material.diffuseColor  = new _B.Color3(.8,.8,.8);
            material.emissiveColor = new _B.Color3(.32,.32,.32);
            material.specularColor = new _B.Color3(.5,.5,.5);
            material.specularPower = 50;
            material.alpha =  1;
            material.backFaceCulling = true;
            material.checkReadyOnlyOnce = false;
            material.maxSimultaneousLights = 4;
        } else material.markDirty();

        material = scene.getMaterialByID("Sword.Material.003");
        if (!material){
            material = new _B.StandardMaterial("Sword.Material.003", scene);
            material.ambientColor  = new _B.Color3(.2462,.2462,.2462);
            material.diffuseColor  = new _B.Color3(.197,.197,.197);
            material.emissiveColor = new _B.Color3(.0936,.0936,.0936);
            material.specularColor = new _B.Color3(0,0,0);
            material.specularPower = 50;
            material.alpha =  1;
            material.backFaceCulling = true;
            material.checkReadyOnlyOnce = false;
            material.maxSimultaneousLights = 4;
        } else material.markDirty();
        var multiMaterial;
        multiMaterial = new _B.MultiMaterial("Sword.Multimaterial#0", scene);
        multiMaterial.subMaterials.push(scene.getMaterialByID("Sword.Material"));
        multiMaterial.subMaterials.push(scene.getMaterialByID("Sword.Material.001"));
        multiMaterial.subMaterials.push(scene.getMaterialByID("Sword.Material.002"));
        multiMaterial.subMaterials.push(scene.getMaterialByID("Sword.Material.003"));

        if (pendingTextures === 0) {
            matLoaded = true; 
            if (_sceneTransitionName) QI.SceneTransition.perform(_sceneTransitionName, waitingMeshes, _overriddenMillis, _overriddenSound, _options);
        }
        else texLoadStart = _B.Tools.Now;
        _B.Tools.Log("Sword.defineMaterials completed:  " + ((_B.Tools.Now - loadStart) / 1000).toFixed(2) + " secs");
    }
    Sword.defineMaterials = defineMaterials;

    var Sword = (function (_super) {
        __extends(Sword, _super);
        function Sword(name, scene, materialsRootDir, source) {
            _super.call(this, name, scene, null, source, true);

            if (!materialsRootDir) { materialsRootDir = "./"; }
            defineMaterials(scene, materialsRootDir); //embedded version check
            var cloning = source && source !== null;
            var load = _B.Tools.Now;
            var geo = 0;
            var shape = 0;
            this.position.x  = 0;
            this.position.y  = 0;
            this.position.z  = 0;
            this.rotation.x  = 0;
            this.rotation.y  = 0;
            this.rotation.z  = 0;
            this.scaling.x   = 1;
            this.scaling.y   = 1;
            this.scaling.z   = 1;

            this.id = this.name;
            this.billboardMode  = 0;
            this.isVisible  = false; //always false; evaluated again at bottom
            this.setEnabled(true);
            this.checkCollisions = false;
            this.receiveShadows  = false;
            this.castShadows  = false;
            if (!cloning){
                geo = _B.Tools.Now;
                this.setVerticesData(_B.VertexBuffer.PositionKind, new Float32Array([
                    .01,0,-.3073,.0084,-.0964,-2.151,.01,-.1014,-.2936,-.0084,-.0964,-2.151,-.01,0,-.3073,-.01,-.1014,-.2936,.0084,.0964,-2.151,.0084,0,-2.5361,-.0084,.0964,-2.151,-.01,.1014,-.2936,-.045,0,.1884,.0483,0,.1884,.0017,.0472,.1866,-.0084,0,-2.5361,.01,.1014,-.2936,.0364,-.0461,.1884,.0017,-.0472,.1866
                    ,.0364,.0461,.1884,-.0331,.0481,.1884,-.0331,-.0481,.1884,.0468,0,.2114,.0292,.0366,-.2433,.0468,0,-.2433,.0292,.0366,.2114,-.0104,.0457,-.2433,.0292,.0366,-.2433,-.0104,.0457,.2114,-.0422,.0203,-.2433,-.0104,.0457,-.2433,-.0422,.0203,-.2433,-.0422,-.0203,.2114,-.0422,-.0203,-.2433,-.0422,-.0203,.2114,-.0104,-.0457,-.2433
                    ,-.0422,-.0203,-.2433,.0468,0,.2114,-.0104,-.0457,.2114,-.0422,.0203,.2114,-.0104,-.0457,.2114,.0292,-.0366,-.2433,-.0104,-.0457,-.2433,.0292,-.0366,.2114,.0468,0,-.2433,.0292,-.0366,-.2433,.0292,.0366,-.2433,-.0422,.0203,-.2433,-.0104,-.0457,-.2433,.0292,.0366,.2114,-.0104,.0457,.2114,-.0422,.0203,.2114,-.0422,.0203,-.2433
                    ,-.0422,.0203,.2114,-.0422,-.0203,.2114,-.0104,-.0457,.2114,-.0104,.0457,.2114,.0292,.0366,.2114,.0468,0,.2114,.0292,-.0366,.2114,-.0422,-.0203,.2114,.0292,.0366,.2114,.0468,0,.2114,-.0104,-.0457,.2114,.0292,-.0366,.2114,.0468,0,.2114,.0468,0,-.2433,.0292,-.0366,-.2433,.0468,0,-.2433,-.0104,-.0457,-.2433
                    ,.0292,.0366,-.2433,-.0104,.0457,-.2433,-.0422,.0203,-.2433,-.0422,.0203,-.2433,-.0422,-.0203,-.2433,-.0104,-.0457,-.2433,-.0104,-.0457,-.2433,.0468,0,-.2433,.0292,.0366,-.2433,0,-.1638,-.3021,-.0084,-.0964,-2.151,-.01,-.1014,-.2936,0,-.1354,-2.1789,-.0084,0,-2.5361,.0084,0,-2.5361,0,-.1354,-2.1789,.0084,-.0964,-2.151
                    ,0,-.1638,-.3021,.01,-.1014,-.2936,0,.1638,-.3021,-.0084,.0964,-2.151,0,.1354,-2.1789,0,0,-2.686,0,.1354,-2.1789,.0084,.0964,-2.151,0,.1638,-.3021,.01,.1014,-.2936,0,0,-2.686,0,-.1354,-2.1789,0,-.1354,-2.1789,0,-.1638,-.3021,-.01,.1014,-.2936,0,.1354,-2.1789,0,0,-2.686
                    ,0,.1638,-.3021,0,.1354,-2.1789,-.0561,-.1014,-.2946,-.0561,-.2239,-.2441,-.0561,-.2239,-.3093,-.0561,0,-.308,-.0561,0,-.2295,-.0561,-.0478,-.2295,0,-.1644,-.2314,-.0561,-.2239,-.2441,-.0561,-.1013,-.2295,.0574,-.1014,-.2946,.0574,-.1013,-.2295,.0574,-.0457,-.2295,.0574,-.2239,-.3093,0,-.2315,-.246,.0574,-.2239,-.2441
                    ,.0574,-.2239,-.2441,0,-.2315,-.246,0,-.164,-.2938,-.0561,-.2239,-.3093,0,-.2311,-.3084,.0574,-.2239,-.3093,.0574,-.1014,-.2946,-.0331,-.0481,.1884,.0017,-.1662,.2369,.0017,-.0472,.1866,0,-.0468,-.2313,.0574,-.1013,-.2295,-.0561,-.0478,-.2295,.0489,-.1617,.2393,.0017,-.1663,.3057,.0489,-.1618,.3081,-.0331,-.0481,.1884
                    ,-.0617,0,.2393,-.0455,-.1699,.2393,.0364,-.0461,.1884,.065,0,.2393,.0483,0,.1884,.0364,-.0461,.1884,-.0617,0,.3081,-.0122,-.0364,.3727,-.0455,-.1701,.3081,.0017,-.036,.372,.065,0,.3081,.0017,-.036,.372,-.0122,0,.3727,.0017,0,.372,.0155,-.0356,.3727,.0155,0,.3727,.0155,-.0356,.3727
                    ,.0155,0,.3727,.0155,-.0356,.3727,.0574,-.1014,-.2946,0,-.1638,-.3021,-.0561,-.1014,-.2946,-.01,0,-.3073,-.0561,0,-.308,-.01,-.1014,-.2936,-.0561,-.1014,-.2946,.01,0,-.3073,.0574,-.1014,-.2946,.0574,0,-.308,-.0561,.1014,-.2946,-.0561,.2239,-.2441,-.0561,.1013,-.2295,-.0561,.0478,-.2295,-.0561,.2239,-.2441
                    ,0,.1644,-.2314,-.0561,.1013,-.2295,.0574,.0457,-.2295,.0574,.1014,-.2946,.0574,0,-.308,0,.2315,-.246,.0574,.2239,-.3093,.0574,.2239,-.2441,-.0561,.2239,-.3093,0,.2311,-.3084,.0574,.2239,-.2441,.0574,.1013,-.2295,0,.164,-.2938,-.0561,.2239,-.3093,-.0561,.1014,-.2946,.0574,.2239,-.3093,.0574,.1014,-.2946
                    ,.0574,.1013,-.2295,.0017,.1662,.2369,-.0331,.0481,.1884,.0017,.0472,.1866,0,.0468,-.2313,.0574,.0457,-.2295,-.0561,.1013,-.2295,-.0561,.0478,-.2295,.0489,.1617,.2393,.0017,.1663,.3057,-.0331,.0481,.1884,-.045,0,.1884,.0364,.0461,.1884,.0483,0,.1884,.0364,.0461,.1884,.0017,.0472,.1866,-.0122,.0364,.3727
                    ,-.0455,.1701,.3081,-.0455,.1699,.2393,.0017,.036,.372,.0155,.0356,.3727,.0155,.0356,.3727,.0489,.1618,.3081,.0155,.0356,.3727,.0574,.1014,-.2946,0,.1638,-.3021,.01,.1014,-.2936,-.0561,.1014,-.2946,-.01,0,-.3073,-.01,.1014,-.2936,-.01,.1014,-.2936,0,.1638,-.3021,.0574,.1014,-.2946,.01,0,-.3073
                    ,.0574,.0457,-.2295,.0574,0,-.2295,-.0561,0,-.2295,-.0561,-.0478,-.2295,-.0561,-.1013,-.2295,-.0561,-.1013,-.2295,0,-.2315,-.246,-.0561,-.2239,-.2441,.0574,0,-.2295,.0574,0,-.308,.0574,0,-.308,0,-.2311,-.3084,0,-.2311,-.3084,.0574,-.1013,-.2295,.0574,-.2239,-.2441,-.0561,-.1014,-.2946,-.0561,-.2239,-.3093
                    ,.0574,-.2239,-.3093,-.0331,-.0481,.1884,.0574,-.0457,-.2295,.0574,-.1013,-.2295,-.0331,-.0481,.1884,-.045,0,.1884,.0364,-.0461,.1884,.0364,-.0461,.1884,.0017,-.0472,.1866,-.0122,0,.3727,.0017,-.036,.372,-.0122,-.0364,.3727,.0017,-.036,.372,.0155,-.0356,.3727,.0155,-.0356,.3727,.0574,-.1014,-.2946,.01,-.1014,-.2936
                    ,0,-.1638,-.3021,-.0561,-.1014,-.2946,-.01,-.1014,-.2936,-.01,0,-.3073,0,-.1638,-.3021,-.01,-.1014,-.2936,.01,0,-.3073,.01,-.1014,-.2936,.0574,-.1014,-.2946,-.0561,.2239,-.2441,0,.2315,-.246,.0574,0,-.308,.0574,0,-.2295,.0574,.1013,-.2295,0,.2315,-.246,.0574,.2239,-.2441,0,.2311,-.3084
                    ,-.0561,.2239,-.3093,.0574,.2239,-.3093,0,.2311,-.3084,-.0331,.0481,.1884,-.0561,.1013,-.2295,-.0331,.0481,.1884,.0364,.0461,.1884,.0364,.0461,.1884,-.0122,0,.3727,.0017,.036,.372,-.0122,.0364,.3727,.0155,0,.3727,.0155,.0356,.3727,.0155,.0356,.3727,.0017,.036,.372,.0574,.1014,-.2946,0,.1638,-.3021
                    ,-.0561,.1014,-.2946,-.0561,0,-.308,-.01,0,-.3073,-.0561,.1014,-.2946,-.01,.1014,-.2936,.0574,.1014,-.2946,.01,.1014,-.2936,.01,0,-.3073,.0574,-.0457,-.2295,-.0561,0,-.2295,-.0561,.0478,-.2295,-.0561,0,-.2295
                ]),
                false);

                var _i;//indices & affected indices for shapekeys
                _i = new Uint32Array(552);
                _i.set([0,1,2,3,4,5,0,6,7,4,8,9,10,11,12,0,7,1,3,13,4,0,14,6,4,13,8,15,11,16,17,12,11,18,10,12,19,16,10,11,10,16]);
                CONTIG(_i, 42, 20, 46);
                _i.set([20,47,21,23,48,24,26,49,27,50,51,30,52,53,33,54,55,37,56,57,36,36,58,37,37,59,60,61,62,39,41], 69);
                CONTIG(_i, 100, 63, 81);
                _i.set([78,82,83,84,84,85,86,87,88,89,89,81,90,91,82,92,93,92,94,77,80,78,80,90,81,82,95,96,84,97,98,87,99,88,89,88,81,100,101,82,102,103,92], 119);
                CONTIG(_i, 162, 104, 118);
                _i.set([117,106,105,110,119,120,121,122,123,121,124,125,113,118,114,126,127,128,129,130,110,129,112], 177);
                CONTIG(_i, 200, 131, 141);
                _i.set([127,132,142,143,144,133,143,145,137,133,127,137,142,144,132,146,139,147,148,149,150,149,151,146,152,153,133,154,134,155,156,121,157,158,159,121,160,161,162,163,164,165,166,167,168,107,165,169,170,171
                ,172,173,174,175,176,177,175,178,179,170,180,181,182,183,184,185,182,186,177,173,187,188,189,190,191,181,192,193,191,194,195,196,188,197,136,198,139,199,200,201,188,202,203,142,204,196,203,204,196,205
                ,188,205,142,136,146,195,139,148,206,149,149,207,151,146,208,209,210,196,209,211,212,213,214,215,216,182,217,218,219,220,164,191,221,222,223,129,224,104,225,105,109,226,104,104,107,109,110,227,228,115
                ,229,230,231,113,115,116,232,117,117,233,106,110,234,235,121,236,237,121,123,238,113,116,118,239,137,127,129,240,241,129,110,112,132,127,133,242,243,136,244,132,139,245,246,127,142,247,143,133,144,143
                ,137,144,133,137,136,142,132,134,146,248,249,148,150,250,149,146,134,251,133,145,252,253,254,255,256,257,258,121,259,260,261,262,263,165,178,166,165,167,168,168,108,107,264,265,170,266,267,172,172,268
                ,173,175,179,176,175,166,178,170,269,270,182,271,272,273,274,182,177,176,173,188,205,275,191,170,181,276,170,191,195,209,196,277,205,136,139,195,278,279,195,188,203,280,142,196,281,203,196,204,205,205
                ,204,142,146,209,195,148,282,206,149,206,207,146,283,284,285,286,196,287,182,288,289,290,291,182,292,293,294,295,296,222,297,129,129,191,222,298,299,191,191,129,300], 211);
                this.setIndices(_i);

                this.setVerticesData(_B.VertexBuffer.NormalKind, new Float32Array([
                    .7325,0,-.6807,.9941,-.1079,-.01,.6485,-.0465,-.7598,-.9941,-.1079,-.01,-.7324,0,-.6808,-.6599,-.101,-.7445,.9941,.1079,-.01,.9987,0,-.0509,-.9941,.1079,-.01,-.6599,.101,-.7445,-.6466,0,-.7628,.6485,0,-.7612,.0058,.1916,-.9814,-.9987,0,-.0509,.6485,.0465,-.7598,.4972,-.1974,-.8448,.0058,-.1916,-.9814
                    ,.4972,.1974,-.8448,-.4927,.1978,-.8474,-.4927,-.1978,-.8474,.7836,0,.6212,.4886,.6126,-.6212,.7836,0,-.6212,.4886,.6126,.6212,-.1744,.7639,-.6212,.4886,.6126,-.6212,-.1744,.7639,.6212,-.706,.34,-.6212,-.1744,.7639,-.6212,-.706,.34,-.6212,-.706,-.34,.6212,-.706,-.34,-.6212,-.706,-.34,.6212,-.1744,-.7639,-.6212
                    ,-.706,-.34,-.6212,.7836,0,.6212,-.1744,-.7639,.6212,-.706,.34,.6212,-.1744,-.7639,.6212,.4886,-.6126,-.6212,-.1744,-.7639,-.6212,.4886,-.6126,.6212,.7836,0,-.6212,.4886,-.6126,-.6212,.4886,.6126,-.6212,-.706,.34,-.6212,-.1744,-.7639,-.6212,.4886,.6126,.6212,-.1744,.7639,.6212,-.706,.34,.6212,-.706,.34,-.6212
                    ,-.706,.34,.6212,-.706,-.34,.6212,-.1744,-.7639,.6212,-.1744,.7639,.6212,.4886,.6126,.6212,.7836,0,.6212,.4886,-.6126,.6212,-.706,-.34,.6212,.4886,.6126,.6212,.7836,0,.6212,-.1744,-.7639,.6212,.4886,-.6126,.6212,.7836,0,.6212,.7836,0,-.6212,.4886,-.6126,-.6212,.7836,0,-.6212,-.1744,-.7639,-.6212
                    ,.4886,.6126,-.6212,-.1744,.7639,-.6212,-.706,.34,-.6212,-.706,.34,-.6212,-.706,-.34,-.6212,-.1744,-.7639,-.6212,-.1744,-.7639,-.6212,.7836,0,-.6212,.4886,.6126,-.6212,-.1901,-.924,-.3318,-.9941,-.1079,-.01,-.6599,-.101,-.7445,0,-.9868,-.1622,-.9987,0,-.0509,.9987,0,-.0509,0,-.9868,-.1622,.9941,-.1079,-.01
                    ,-.1901,-.924,-.3318,.6485,-.0465,-.7598,-.1901,.924,-.3318,-.9941,.1079,-.01,0,.9868,-.1622,0,0,-1,0,.9868,-.1622,.9941,.1079,-.01,-.1901,.924,-.3318,.6485,.0465,-.7598,0,0,-1,0,-.9868,-.1622,0,-.9868,-.1622,-.1901,-.924,-.3318,-.6599,.101,-.7445,0,.9868,-.1622,0,0,-1
                    ,-.1901,.924,-.3318,0,.9868,-.1622,-.7187,-.0259,-.6948,-.6213,-.5749,.5324,-.5851,-.4867,-.6486,-.6732,0,-.7394,-.6958,0,.7182,-.6958,0,.7182,-.0009,-.114,.9935,-.6213,-.5749,.5324,-.6931,-.0203,.7205,.7269,-.0158,-.6865,.6933,-.0206,.7203,.6961,0,.7179,.5846,-.488,-.6481,-.001,-.8051,.5931,.6207,-.5756,.5323
                    ,.6207,-.5756,.5323,-.001,-.8051,.5931,-.0702,-.1096,-.9915,-.5851,-.4867,-.6486,-.0009,-.6632,-.7485,.5846,-.488,-.6481,.7269,-.0158,-.6865,-.4927,-.1978,-.8474,.0681,-.823,-.564,.0058,-.1916,-.9814,.0003,-.0003,1,.6933,-.0206,.7203,-.6958,0,.7182,.6144,-.6571,-.4366,.0754,-.8584,.5074,.6022,-.66,.449,-.4927,-.1978,-.8474
                    ,-.982,0,-.1889,-.5579,-.7027,-.4415,.4972,-.1974,-.8448,.9819,0,-.1894,.6485,0,-.7612,.4972,-.1974,-.8448,-.9527,0,.304,-.3751,-.1792,.9095,-.547,-.7046,.4521,.0069,-.2355,.9718,.9529,0,.3033,.0069,-.2355,.9718,-.42,0,.9075,-.0002,0,1,.3822,-.176,.9072,.4202,0,.9074,.3822,-.176,.9072
                    ,.4202,0,.9074,.3822,-.176,.9072,.7269,-.0158,-.6865,-.1901,-.924,-.3318,-.7187,-.0259,-.6948,-.7324,0,-.6808,-.6732,0,-.7394,-.6599,-.101,-.7445,-.7187,-.0259,-.6948,.7325,0,-.6807,.7269,-.0158,-.6865,.6734,0,-.7393,-.7187,.0259,-.6948,-.6213,.5749,.5324,-.6931,.0203,.7205,-.6958,0,.7182,-.6213,.5749,.5324
                    ,-.0009,.114,.9935,-.6931,.0203,.7205,.6961,0,.7179,.7269,.0158,-.6865,.6734,0,-.7393,-.001,.8051,.5932,.5846,.488,-.6481,.6207,.5756,.5323,-.5851,.4867,-.6486,-.0009,.6632,-.7485,.6207,.5756,.5323,.6933,.0206,.7203,-.0702,.1096,-.9915,-.5851,.4867,-.6486,-.7187,.0259,-.6948,.5846,.488,-.6481,.7269,.0158,-.6865
                    ,.6933,.0206,.7203,.0681,.823,-.564,-.4927,.1978,-.8474,.0058,.1916,-.9814,.0003,.0003,1,.6961,0,.7179,-.6931,.0203,.7205,-.6958,0,.7182,.6144,.6571,-.4366,.0754,.8584,.5074,-.4927,.1978,-.8474,-.6466,0,-.7628,.4972,.1974,-.8448,.6485,0,-.7612,.4972,.1974,-.8448,.0058,.1916,-.9814,-.3751,.1792,.9095
                    ,-.547,.7046,.4521,-.5579,.7027,-.4415,.0069,.2355,.9718,.3822,.176,.9072,.3822,.176,.9072,.6022,.66,.449,.3822,.176,.9072,.7269,.0158,-.6865,-.1901,.924,-.3318,.6485,.0465,-.7598,-.7187,.0259,-.6948,-.7324,0,-.6808,-.6599,.101,-.7445,-.6599,.101,-.7445,-.1901,.924,-.3318,.7269,.0158,-.6865,.7325,0,-.6807
                    ,.6961,0,.7179,.6961,0,.7179,-.6958,0,.7182,-.6958,0,.7182,-.6931,-.0203,.7205,-.6931,-.0203,.7205,-.001,-.8051,.5931,-.6213,-.5749,.5324,.6961,0,.7179,.6734,0,-.7393,.6734,0,-.7393,-.0009,-.6632,-.7485,-.0009,-.6632,-.7485,.6933,-.0206,.7203,.6207,-.5756,.5323,-.7187,-.0259,-.6948,-.5851,-.4867,-.6486
                    ,.5846,-.488,-.6481,-.4927,-.1978,-.8474,.6961,0,.7179,.6933,-.0206,.7203,-.4927,-.1978,-.8474,-.6466,0,-.7628,.4972,-.1974,-.8448,.4972,-.1974,-.8448,.0058,-.1916,-.9814,-.42,0,.9075,.0069,-.2355,.9718,-.3751,-.1792,.9095,.0069,-.2355,.9718,.3822,-.176,.9072,.3822,-.176,.9072,.7269,-.0158,-.6865,.6485,-.0465,-.7598
                    ,-.1901,-.924,-.3318,-.7187,-.0259,-.6948,-.6599,-.101,-.7445,-.7324,0,-.6808,-.1901,-.924,-.3318,-.6599,-.101,-.7445,.7325,0,-.6807,.6485,-.0465,-.7598,.7269,-.0158,-.6865,-.6213,.5749,.5324,-.001,.8051,.5932,.6734,0,-.7393,.6961,0,.7179,.6933,.0206,.7203,-.001,.8051,.5932,.6207,.5756,.5323,-.0009,.6632,-.7485
                    ,-.5851,.4867,-.6486,.5846,.488,-.6481,-.0009,.6632,-.7485,-.4927,.1978,-.8474,-.6931,.0203,.7205,-.4927,.1978,-.8474,.4972,.1974,-.8448,.4972,.1974,-.8448,-.42,0,.9075,.0069,.2355,.9718,-.3751,.1792,.9095,.4202,0,.9074,.3822,.176,.9072,.3822,.176,.9072,.0069,.2355,.9718,.7269,.0158,-.6865,-.1901,.924,-.3318
                    ,-.7187,.0259,-.6948,-.6732,0,-.7394,-.7324,0,-.6808,-.7187,.0259,-.6948,-.6599,.101,-.7445,.7269,.0158,-.6865,.6485,.0465,-.7598,.7325,0,-.6807,.6961,0,.7179,-.6958,0,.7182,-.6958,0,.7182,-.6958,0,.7182
                ]),
                false);

                this.setVerticesData(_B.VertexBuffer.UVKind, new Float32Array([
                    .0691,.0059,.0287,.7771,.0266,.0002,.2477,.7771,.2073,.0059,.2498,.0002,.1095,.7771,.0691,.937,.1669,.7771,.1648,.0002,.7775,.0464,.7117,.0623,.7366,.0211,.2073,.937,.1116,.0002,.728,.0928,.7527,.0876,.7122,.0278,.7609,.0145,.7773,.0823,.8893,.4914,.9307,.9548,.8893,.9548,.9316,.0272,.973,.4905
                    ,.9316,.4905,.9316,.4914,.973,.9548,.9316,.9548,.8046,.8099,.8461,.3465,.8461,.8099,.8893,.0272,.9307,.4905,.8893,.4905,.8124,.1753,.781,.2182,.7463,.178,.847,.0272,.8884,.4905,.847,.4905,.847,.4914,.8884,.9548,.847,.9548,.7406,.093,.7928,.1027,.7717,.1514,.9307,.4914,.973,.0272,.973,.4914
                    ,.8046,.8099,.8046,.3465,.8893,.0272,.9307,.0272,.7637,.1542,.7932,.1531,.8124,.1753,.8071,.2043,.754,.2065,.7932,.1531,.8124,.1753,.847,.0272,.8884,.0272,.8884,.4914,.8884,.9548,.7427,.146,.7288,.12,.7717,.1514,.7406,.093,.769,.0853,.7928,.1027,.7928,.1027,.7939,.1321,.7717,.1514,.7717,.1514
                    ,.7288,.12,.7406,.093,.2762,.0037,.2477,.7771,.2498,.0002,.2643,.7888,.2073,.937,.0691,.937,.0121,.7888,.0287,.7771,.0002,.0037,.0266,.0002,.1384,.0037,.1669,.7771,.1503,.7888,.2073,.9998,.1261,.7888,.1095,.7771,.138,.0037,.1116,.0002,.0691,.9998,.0121,.7888,.0121,.7888,.0002,.0037,.1648,.0002
                    ,.1261,.7888,.0691,.9998,.138,.0037,.1261,.7888,.6581,.6588,.7223,.566,.776,.5866,.5432,.6904,.5368,.6058,.5854,.5983,.7062,.9165,.7701,.9757,.6399,.9758,.6383,.4195,.6279,.4887,.5756,.4877,.76,.4682,.7233,.5327,.7124,.4998,.7701,.8558,.7784,.9165,.7049,.7888,.7758,.7418,.7759,.7918,.7717,.8428
                    ,.6473,.8532,.6351,.4023,.5174,.2201,.704,.3137,.5824,.9165,.6399,.8558,.5834,.9758,.5178,.2179,.5148,.2188,.5152,.2173,.6351,.4023,.4755,.2781,.5158,.2217,.7393,.2073,.5333,.1627,.5987,.0322,.7393,.2073,.5024,.2244,.5087,.2167,.5139,.2201,.509,.216,.5116,.2061,.8253,.2612,.8088,.2386,.8185,.236
                    ,.8349,.2583,.8282,.2334,.5093,.2154,.5074,.2143,.5093,.2154,.6473,.8532,.688,.7881,.6526,.7212,.5325,.7618,.5346,.71,.6492,.7661,.6526,.7212,.5309,.8016,.6473,.8532,.5287,.8548,.4267,.6755,.3506,.5946,.4363,.6054,.487,.6061,.2957,.9757,.3596,.9165,.4259,.9758,.4809,.4942,.4075,.4326,.5227,.4031
                    ,.3364,.5606,.2829,.4986,.3404,.5222,.2997,.629,.2805,.5673,.2957,.8558,.4259,.8558,.3584,.7746,.2916,.7221,.4161,.7115,.2874,.8231,.4106,.8436,.4272,.5031,.4969,.2099,.2805,.2246,.3102,.1164,.4835,.9165,.4846,.8558,.4259,.9758,.4825,.9758,.4984,.2081,.4994,.2111,.2805,.2246,.4132,.4023,.3743,.0244
                    ,.5987,.0322,.3743,.0244,.3102,.1164,.5048,.2147,.4989,.2126,.4966,.212,.8117,.2108,.8214,.2085,.5055,.2135,.5004,.2099,.5055,.2135,.4106,.8436,.3754,.7753,.4142,.7973,.4161,.7115,.5325,.7618,.4158,.7566,.4158,.7566,.3754,.7753,.4106,.8436,.5309,.8016,.4846,.8558,.5329,.8558,.5329,.9758,.5834,.9758
                    ,.6361,.5893,.6361,.5893,.7784,.9165,.7701,.9757,.5279,.4877,.5227,.4031,.5227,.4031,.776,.5262,.776,.5262,.6399,.8558,.7701,.8558,.6526,.7212,.7758,.7418,.7717,.8428,.6351,.4023,.5812,.8558,.6399,.8558,.6351,.4023,.4132,.4023,.7393,.2073,.7393,.2073,.704,.3137,.5067,.2158,.8253,.2612,.8157,.2641
                    ,.8253,.2612,.5093,.2154,.5093,.2154,.6473,.8532,.6475,.8068,.688,.7881,.6526,.7212,.6492,.7661,.5325,.7618,.688,.7881,.6492,.7661,.5309,.8016,.6475,.8068,.6473,.8532,.2957,.9757,.2874,.9165,.5227,.4031,.5279,.4877,.4272,.5031,.2874,.9165,.2957,.8558,.2874,.7718,.2916,.7221,.2874,.8231,.2874,.7718
                    ,.2805,.2246,.4259,.9758,.2805,.2246,.3743,.0244,.3743,.0244,.5067,.2158,.5051,.2141,.8019,.2132,.5074,.2143,.5055,.2135,.5055,.2135,.5051,.2141,.4106,.8436,.3754,.7753,.4161,.7115,.5346,.71,.5325,.7618,.4161,.7115,.4158,.7566,.4106,.8436,.4142,.7973,.5309,.8016,.5812,.8558,.5329,.9758,.4825,.9758
                    ,.5329,.9758
                ]),
                false);

                geo = (_B.Tools.Now - geo) / 1000;
                this.setMaterialByID("Sword.Multimaterial#0");
                this.subMeshes = [];
                new _B.SubMesh(0, 0, 20, 0, 42, this);
                new _B.SubMesh(1, 20, 57, 42, 72, this);
                new _B.SubMesh(2, 77, 27, 114, 48, this);
                new _B.SubMesh(3, 104, 197, 162, 390, this);
                if (scene._selectionOctree) {
                    scene.createOrUpdateSelectionOctree();
                }
            }
            if (this.postConstruction) this.postConstruction();
            load = (_B.Tools.Now - load) / 1000;
            _B.Tools.Log("defined mesh: " + this.name + (cloning ? " (cloned)" : "") + " completed:  " + load.toFixed(2) + ", geometry:  " + geo.toFixed(2) + ", skey:  " + shape.toFixed(2) + " secs");
            if (matLoaded && !_sceneTransitionName){
                if (typeof this.grandEntrance == "function") this.grandEntrance();
                else makeVisible(this);

            } else waitingMeshes.push(this);
        }

        Sword.prototype.dispose = function (doNotRecurse) {
            _super.prototype.dispose.call(this, doNotRecurse);
            if (this.skeleton) this.skeleton.dispose();
            clean(0);
        };
        return Sword;
    })(BABYLON.Mesh);
    Sword.Sword = Sword;

    function freshenShadowRenderLists(scene) {
        var renderList = [];
        for (var i = 0; i < scene.meshes.length; i++){
            if (scene.meshes[i]["castShadows"])
                renderList.push(scene.meshes[i]);
        }

        for (var i = 0; i < scene.lights.length; i++){
            if (scene.lights[i]._shadowGenerator)
                scene.lights[i]._shadowGenerator.getShadowMap().renderList = renderList;
        }
    }
    Sword.freshenShadowRenderLists = freshenShadowRenderLists;
})(Sword || (Sword = {}));