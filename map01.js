// File generated with Tower of Babel version: 5.3-beta on 06/09/17
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var map01;
(function (map01) {
    var _B = BABYLON;
    var _M = _B.Matrix.FromValues;
    var _Q = _B.Quaternion;
    var _V = _B.Vector3;
    function CONTIG(array, offset, begin, end) {
        for(var i = 0, len = 1 + end - begin; i < len; i++) {
            array[offset + i] = begin + i;
        }
    }
    function REPEAT(array, offset, nRepeats, val) {
        for(var i = 0; i < nRepeats; i++) {
            array[offset + i] = val;
        }
    }

    function initScene(scene, resourcesRootDir, positionOffset) {
        if (!resourcesRootDir) { resourcesRootDir = "./"; }
        if (!positionOffset) { positionOffset = null; }
        scene.autoClear = true;
        scene.clearColor    = new _B.Color3(.0509,.0509,.0509);
        scene.ambientColor  = new _B.Color3(0,0,0);
        scene.gravity = new _V(0,-9.81,0);

        // define materials before meshes
        defineMaterials(scene, resourcesRootDir);

        // instance all root meshes
        var mesh;
        mesh = new choinka_003("choinka.003", scene);
        if (positionOffset) mesh.position.addInPlace(positionOffset);
        mesh = new choinka_002("choinka.002", scene);
        if (positionOffset) mesh.position.addInPlace(positionOffset);
        mesh = new choinka_001("choinka.001", scene);
        if (positionOffset) mesh.position.addInPlace(positionOffset);
        mesh = new Plane("Plane", scene);
        if (positionOffset) mesh.position.addInPlace(positionOffset);
        mesh = new choinka("choinka", scene);
        if (positionOffset) mesh.position.addInPlace(positionOffset);

        // lights defined after meshes, so shadow gen's can also be defined
        defineLights(scene, positionOffset);
    }
    map01.initScene = initScene;

    var waitingMeshes = [];
    var pendingTextures = 0;
    var texLoadStart;
    function onTexturesLoaded(){
        if (--pendingTextures > 0) return;
        _B.Tools.Log("Texture Load delay:  " + ((_B.Tools.Now - texLoadStart) / 1000).toFixed(2) + " secs");
        for (var i = 0, len = waitingMeshes.length; i < len; i++){
            if (typeof waitingMeshes[i].grandEntrance == "function") waitingMeshes[i].grandEntrance();
            else makeVisible(waitingMeshes[i]);
        }
        waitingMeshes = [];
        matLoaded = true;
    }

    function makeVisible(mesh){
        var children = mesh.getChildMeshes();
        mesh.isVisible = true;
        for (var i = 0, len = children.length; i < len; i++){
            children[i].isVisible = true;
        }
    }

    var aheadQueued = false;
    function matReadAhead(materialsRootDir) {
        if (aheadQueued) return;
        var txBuffer;
        var fName;

        fName = "korona2.png";
        if (!TOWER_OF_BABEL.Preloader.findTextureBuffer(fName)) {
            txtBuffer = new TOWER_OF_BABEL.TextureBuffer(materialsRootDir, fName);
            txtBuffer.hasAlpha = true;
            txtBuffer.level = 1;
            txtBuffer.coordinatesIndex = 0;
            txtBuffer.coordinatesMode = 0;
            txtBuffer.uOffset = 0;
            txtBuffer.vOffset = 0;
            txtBuffer.uScale = 1;
            txtBuffer.vScale = 1;
            txtBuffer.uAng = 0;
            txtBuffer.vAng = 0;
            txtBuffer.wAng = 0;
            txtBuffer.wrapU = 1;
            txtBuffer.wrapV = 1;
            pendingTextures++;
            TOWER_OF_BABEL.Preloader.addtextureBuffer(txtBuffer);
        }

        fName = "root.png";
        if (!TOWER_OF_BABEL.Preloader.findTextureBuffer(fName)) {
            txtBuffer = new TOWER_OF_BABEL.TextureBuffer(materialsRootDir, fName);
            txtBuffer.hasAlpha = true;
            txtBuffer.level = 1;
            txtBuffer.coordinatesIndex = 0;
            txtBuffer.coordinatesMode = 0;
            txtBuffer.uOffset = 0;
            txtBuffer.vOffset = 0;
            txtBuffer.uScale = 1;
            txtBuffer.vScale = 1;
            txtBuffer.uAng = 0;
            txtBuffer.vAng = 0;
            txtBuffer.wAng = 0;
            txtBuffer.wrapU = 1;
            txtBuffer.wrapV = 1;
            pendingTextures++;
            TOWER_OF_BABEL.Preloader.addtextureBuffer(txtBuffer);
        }

        fName = "korona2.png";
        if (!TOWER_OF_BABEL.Preloader.findTextureBuffer(fName)) {
            txtBuffer = new TOWER_OF_BABEL.TextureBuffer(materialsRootDir, fName);
            txtBuffer.hasAlpha = true;
            txtBuffer.level = 1;
            txtBuffer.coordinatesIndex = 0;
            txtBuffer.coordinatesMode = 0;
            txtBuffer.uOffset = 0;
            txtBuffer.vOffset = 0;
            txtBuffer.uScale = 1;
            txtBuffer.vScale = 1;
            txtBuffer.uAng = 0;
            txtBuffer.vAng = 0;
            txtBuffer.wAng = 0;
            txtBuffer.wrapU = 1;
            txtBuffer.wrapV = 1;
            pendingTextures++;
            TOWER_OF_BABEL.Preloader.addtextureBuffer(txtBuffer);
        }

        fName = "ground.png";
        if (!TOWER_OF_BABEL.Preloader.findTextureBuffer(fName)) {
            txtBuffer = new TOWER_OF_BABEL.TextureBuffer(materialsRootDir, fName);
            txtBuffer.hasAlpha = true;
            txtBuffer.level = 1;
            txtBuffer.coordinatesIndex = 0;
            txtBuffer.coordinatesMode = 0;
            txtBuffer.uOffset = 0;
            txtBuffer.vOffset = 0;
            txtBuffer.uScale = 1;
            txtBuffer.vScale = 1;
            txtBuffer.uAng = 0;
            txtBuffer.vAng = 0;
            txtBuffer.wAng = 0;
            txtBuffer.wrapU = 1;
            txtBuffer.wrapV = 1;
            pendingTextures++;
            TOWER_OF_BABEL.Preloader.addtextureBuffer(txtBuffer);
        }

        aheadQueued = true;
    }
    map01.matReadAhead = matReadAhead;

    var matLoaded = false;
    function defineMaterials(scene, materialsRootDir) {
        if (!materialsRootDir) { materialsRootDir = "./"; }
        if (materialsRootDir.lastIndexOf("/") + 1  !== materialsRootDir.length) { materialsRootDir  += "/"; }
        TOWER_OF_BABEL.Preloader.SCENE = scene;
        var loadStart = _B.Tools.Now;
        matReadAhead(materialsRootDir);
        var material;
        var texture;
        var txBuffer;


        material = scene.getMaterialByID("map01.korona2.002");
        if (!material){
            material = new _B.StandardMaterial("map01.korona2.002", scene);
            material.ambientColor  = new _B.Color3(.8,.8,.8);
            material.diffuseColor  = new _B.Color3(.4128,.4128,.4128);
            material.emissiveColor = new _B.Color3(0,0,0);
            material.specularColor = new _B.Color3(0,0,0);
            material.specularPower = 50;
            material.alpha =  1;
            material.backFaceCulling = false;
            material.checkReadyOnlyOnce = false;
            material.maxSimultaneousLights = 4;
        txtBuffer = TOWER_OF_BABEL.Preloader.findTextureBuffer("korona2.png");
        txtBuffer.applyWhenReady(material, TOWER_OF_BABEL.TextureBuffer.DIFFUSE_TEX, onTexturesLoaded);
        } else material.markDirty();

        material = scene.getMaterialByID("map01.Material.002");
        if (!material){
            material = new _B.StandardMaterial("map01.Material.002", scene);
            material.ambientColor  = new _B.Color3(1,1,1);
            material.diffuseColor  = new _B.Color3(.8,.8,.8);
            material.emissiveColor = new _B.Color3(0,0,0);
            material.specularColor = new _B.Color3(0,0,0);
            material.specularPower = 50;
            material.alpha =  1;
            material.backFaceCulling = true;
            material.checkReadyOnlyOnce = false;
            material.maxSimultaneousLights = 4;
        txtBuffer = TOWER_OF_BABEL.Preloader.findTextureBuffer("root.png");
        txtBuffer.applyWhenReady(material, TOWER_OF_BABEL.TextureBuffer.DIFFUSE_TEX, onTexturesLoaded);
        } else material.markDirty();

        material = scene.getMaterialByID("map01.korona2");
        if (!material){
            material = new _B.StandardMaterial("map01.korona2", scene);
            material.ambientColor  = new _B.Color3(.8,.8,.8);
            material.diffuseColor  = new _B.Color3(.4126,.4126,.4126);
            material.emissiveColor = new _B.Color3(0,0,0);
            material.specularColor = new _B.Color3(0,0,0);
            material.specularPower = 50;
            material.alpha =  1;
            material.backFaceCulling = false;
            material.checkReadyOnlyOnce = false;
            material.maxSimultaneousLights = 4;
        txtBuffer = TOWER_OF_BABEL.Preloader.findTextureBuffer("korona2.png");
        txtBuffer.applyWhenReady(material, TOWER_OF_BABEL.TextureBuffer.DIFFUSE_TEX, onTexturesLoaded);
        } else material.markDirty();

        material = scene.getMaterialByID("map01.ground");
        if (!material){
            material = new _B.StandardMaterial("map01.ground", scene);
            material.ambientColor  = new _B.Color3(.8,.8,.8);
            material.diffuseColor  = new _B.Color3(.5305,.5305,.5305);
            material.emissiveColor = new _B.Color3(0,0,0);
            material.specularColor = new _B.Color3(0,0,0);
            material.specularPower = 50;
            material.alpha =  1;
            material.backFaceCulling = true;
            material.checkReadyOnlyOnce = false;
            material.maxSimultaneousLights = 4;
        txtBuffer = TOWER_OF_BABEL.Preloader.findTextureBuffer("ground.png");
        txtBuffer.applyWhenReady(material, TOWER_OF_BABEL.TextureBuffer.DIFFUSE_TEX, onTexturesLoaded);
        } else material.markDirty();
        var multiMaterial;
        multiMaterial = new _B.MultiMaterial("map01.Multimaterial#0", scene);
        multiMaterial.subMaterials.push(scene.getMaterialByID("map01.korona2.002"));
        multiMaterial.subMaterials.push(scene.getMaterialByID("map01.Material.002"));
        multiMaterial = new _B.MultiMaterial("map01.Multimaterial#1", scene);
        multiMaterial.subMaterials.push(scene.getMaterialByID("map01.korona2"));
        multiMaterial.subMaterials.push(scene.getMaterialByID("map01.Material.002"));
        multiMaterial = new _B.MultiMaterial("map01.Multimaterial#2", scene);
        multiMaterial.subMaterials.push(scene.getMaterialByID("map01.korona2.002"));
        multiMaterial.subMaterials.push(scene.getMaterialByID("map01.Material.002"));
        multiMaterial = new _B.MultiMaterial("map01.Multimaterial#3", scene);
        multiMaterial.subMaterials.push(scene.getMaterialByID("map01.korona2.002"));
        multiMaterial.subMaterials.push(scene.getMaterialByID("map01.Material.002"));
        if (pendingTextures === 0) matLoaded = true;
        else texLoadStart = _B.Tools.Now;
        _B.Tools.Log("map01.defineMaterials completed:  " + ((_B.Tools.Now - loadStart) / 1000).toFixed(2) + " secs");
    }
    map01.defineMaterials = defineMaterials;

    var choinka_003 = (function (_super) {
        __extends(choinka_003, _super);
        function choinka_003(name, scene, materialsRootDir, source) {
            _super.call(this, name, scene, null, source, true);

            if (!materialsRootDir) { materialsRootDir = "./"; }
            defineMaterials(scene, materialsRootDir); //embedded version check
            var cloning = source && source !== null;
            var load = _B.Tools.Now;
            var geo = 0;
            var shape = 0;
            this.position.x  = -9.2691;
            this.position.y  = 1.6456;
            this.position.z  = 19.6525;
            this.rotation.x  = -1.6562;
            this.rotation.y  = -2.1157;
            this.rotation.z  = 0;
            this.scaling.x   = 7.393;
            this.scaling.y   = 7.393;
            this.scaling.z   = 7.393;

            this.id = this.name;
            this.billboardMode  = 0;
            this.isVisible  = false; //always false; evaluated again at bottom
            this.setEnabled(true);
            this.checkCollisions = false;
            this.receiveShadows  = false;
            this.castShadows  = false;
            if (!cloning){
                geo = _B.Tools.Now;
                this.setVerticesData(_B.VertexBuffer.PositionKind, new Float32Array([
                    0,1.0051,0,-.1442,.2075,-.4937,.254,.2075,-.4636,.1442,.2075,.4937,.4636,.2075,.254,-.254,.2075,.4636,-.4937,.2075,.1442,-.4636,.2075,-.254,.4937,.2075,-.1442,0,1.338,0,.2257,.6287,.294,-.0496,.6287,.3777,-.2257,.6287,-.294,-.3777,.6287,-.0496,.0496,.6287,-.3777,.294,.6287,-.2257,.3777,.6287,.0496
                    ,-.294,.6287,.2257,0,1.7097,0,-.0254,1.0005,-.2755,.1818,1.0005,-.2186,.0254,1.0005,.2755,.2186,1.0005,.1818,-.1818,1.0005,.2186,-.2755,1.0005,.0254,-.2186,1.0005,-.1818,.2755,1.0005,-.0254,0,2.0471,0,.1961,1.3379,-.0814,.2017,1.3379,.0833,-.1961,1.3379,.0814,-.0833,1.3379,.2017,-.2017,1.3379,-.0833,-.0814,1.3379,-.1961
                    ,.0833,1.3379,-.2017,.0814,1.3379,.1961,.0644,.4217,0,.0883,.3832,.0499,.0456,.4217,.0456,0,.7111,.0575,.0456,.4217,.0456,0,.4217,.0644,.0644,.4217,0,.0504,.3471,-.0504,.0713,.3471,0,.0406,.7111,.0406,.0644,.4217,0,.0456,.4217,.0456,0,.3471,-.0575,.0427,.3459,-.0693,.0188,.3459,-.0792
                    ,.0575,.7111,0,.0456,.4217,-.0456,.0644,.4217,0,-.0456,.4217,-.0456,-.0859,.3862,-.1032,0,.4217,-.0644,.0406,.7111,-.0406,0,.4217,-.0644,-.0406,.3471,-.0406,-.1034,.3496,-.0674,-.0713,.3471,0,0,.7111,-.0575,-.0456,.4217,-.0456,0,.4217,-.0644,-.0713,.3471,0,-.0456,.4217,.0456,-.0504,.3471,.0504
                    ,-.0456,.4217,-.0456,-.0575,.7111,0,-.0644,.4217,0,-.0575,.7111,0,0,.7111,-.0575,.0575,.7111,0,-.0504,.3471,.0504,-.0604,.3676,.147,0,.3471,.0575,.0988,.3832,.0245,.0644,.4217,0,-.0406,.7111,.0406,-.0456,.4217,.0456,.0406,.3471,.0406,.0427,.3898,-.0693,.0439,.3828,-.1275,.0615,.3828,-.127
                    ,.0504,.3471,-.0504,.0427,.3898,-.0693,.0427,.3459,-.0693,0,.4217,-.0644,.0427,.3898,-.0693,0,.3471,-.0575,.0188,.3898,-.0792,0,.4217,-.0644,.0439,.3529,-.1275,.0537,.3551,-.2666,.0439,.3828,-.1275,.0188,.3459,-.0792,.0439,.3828,-.1275,.0427,.3898,-.0693,.0615,.3529,-.127,.0427,.3459,-.0693,.0439,.3529,-.1275
                    ,.0595,.3551,-.2664,.0537,.3453,-.2666,.0595,.3453,-.2664,.0595,.3551,-.2664,.0595,.3453,-.2664,.0439,.3529,-.1275,.0595,.3453,-.2664,.0537,.3453,-.2666,.0537,.3551,-.2666,.0595,.3551,-.2664,-.1021,.3496,-.0889,-.1647,.3484,-.1199,-.1759,.3484,-.1176,-.1823,.3484,-.108,-.1034,.3862,-.0674,-.1021,.3862,-.0889,-.0713,.3471,0
                    ,-.1034,.3862,-.0674,-.0644,.4217,0,-.0859,.3496,-.1032,0,.3471,-.0575,-.0859,.3862,-.1032,-.0859,.3496,-.1032,-.1759,.3679,-.1176,-.2674,.3525,-.2488,-.2661,.3525,-.2507,-.1823,.3484,-.108,-.2674,.3525,-.2488,-.1823,.3679,-.108,-.0859,.3496,-.1032,-.1647,.3679,-.1199,-.1647,.3484,-.1199,-.1034,.3496,-.0674,-.1034,.3862,-.0674
                    ,-.1823,.3679,-.108,-.1647,.3679,-.1199,-.2638,.3525,-.2512,-.2661,.3486,-.2507,-.2638,.3486,-.2512,-.2661,.3525,-.2507,-.2674,.3486,-.2488,-.2661,.3486,-.2507,-.2638,.3525,-.2512,-.1647,.3679,-.1199,-.2674,.3486,-.2488,-.2638,.3486,-.2512,-.2661,.3486,-.2507,-.1647,.3484,-.1199,-.0786,.3676,.1329,-.114,.3658,.2109,-.114,.3416,.2109
                    ,-.0786,.4068,.1329,0,.4217,.0644,-.0604,.3676,.147,-.0604,.4068,.147,0,.4217,.0644,-.0786,.4068,.1329,-.0456,.4217,.0456,-.114,.3416,.2109,-.12,.3461,.2948,-.0999,.3416,.2133,-.0786,.4068,.1329,-.0999,.3658,.2133,-.114,.3658,.2109,-.0786,.3676,.1329,-.0604,.3676,.147,-.0999,.3658,.2133,-.1227,.3508,.2943
                    ,-.12,.3461,.2948,-.1227,.3461,.2943,-.0999,.3416,.2133,-.12,.3508,.2948,-.0999,.3658,.2133,-.1227,.3508,.2943,-.1227,.3461,.2943,-.1227,.3508,.2943,-.114,.3658,.2109,.0883,.3366,.0499,.1152,.3434,.0834,.1297,.3434,.0703,.1308,.3434,.0508,.0988,.3366,.0245,0,.3471,.0575,.063,.3832,.0604,.063,.3366,.0604
                    ,.063,.3366,.0604,.0456,.4217,.0456,.0713,.3471,0,.1152,.3434,.0834,.2343,.3444,.0865,.2343,.3374,.0865,.1297,.3765,.0703,.2376,.3444,.0797,.2374,.3444,.0837,.1152,.3765,.0834,.063,.3832,.0604,.0988,.3366,.0245,.1308,.3765,.0508,.1308,.3765,.0508,.1152,.3434,.0834,.2374,.3444,.0837,.2376,.3374,.0797
                    ,.2374,.3374,.0837,.2343,.3444,.0865,.2343,.3374,.0865,.2376,.3374,.0797,.2343,.3374,.0865,.2374,.3374,.0837,.2343,.3444,.0865,.1308,.3434,.0508,.2376,.3444,.0797,.0988,.3832,.0245,.0406,.7111,.0406,.0456,.4217,.0456,.0644,.4217,0,.0575,.7111,0,.0644,.4217,0,.0504,.3471,-.0504,0,.7111,-.0575
                    ,0,.4217,-.0644,-.0406,.7111,-.0406,-.0456,.4217,-.0456,-.0713,.3471,0,-.0456,.4217,-.0456,.0575,.7111,0,.0406,.7111,.0406,0,.7111,.0575,0,.7111,.0575,-.0406,.7111,.0406,-.0575,.7111,0,-.0575,.7111,0,-.0406,.7111,-.0406,0,.7111,-.0575,0,.7111,-.0575,.0406,.7111,-.0406,.0575,.7111,0
                    ,.0575,.7111,0,0,.7111,.0575,-.0575,.7111,0,-.0504,.3471,.0504,-.0786,.3676,.1329,-.0406,.7111,.0406,.0988,.3366,.0245,-.0504,.3471,.0504,.0713,.3471,0,.0504,.3471,-.0504,.0504,.3471,-.0504,-.0504,.3471,.0504,.0188,.3898,-.0792,.0504,.3471,-.0504,.0456,.4217,-.0456,.0427,.3898,-.0693,0,.4217,-.0644
                    ,.0188,.3898,-.0792,.0427,.3898,-.0693,0,.3471,-.0575,.0188,.3459,-.0792,.0537,.3453,-.2666,.0188,.3459,-.0792,.0439,.3828,-.1275,.0427,.3898,-.0693,.0615,.3828,-.127,.0615,.3529,-.127,.0439,.3529,-.1275,.0537,.3551,-.2666,.0615,.3828,-.127,.0595,.3551,-.2664,.0439,.3529,-.1275,.0615,.3529,-.127,.0595,.3453,-.2664
                    ,.0537,.3551,-.2666,-.0644,.4217,0,-.0713,.3471,0,-.1034,.3496,-.0674,-.1034,.3862,-.0674,0,.3471,-.0575,0,.4217,-.0644,-.0859,.3862,-.1032,-.1823,.3679,-.108,-.1823,.3484,-.108,-.2674,.3486,-.2488,-.2674,.3525,-.2488,-.0859,.3496,-.1032,-.0859,.3862,-.1032,-.1034,.3496,-.0674,-.1823,.3484,-.108,-.1823,.3679,-.108
                    ,-.1647,.3679,-.1199,-.2661,.3525,-.2507,-.2661,.3525,-.2507,-.2674,.3525,-.2488,-.2638,.3525,-.2512,-.2661,.3486,-.2507,-.2674,.3486,-.2488,-.2638,.3486,-.2512,-.1647,.3484,-.1199,0,.4217,.0644,0,.3471,.0575,-.0604,.3676,.147,0,.4217,.0644,-.0604,.4068,.147,-.0786,.4068,.1329,-.114,.3416,.2109,-.1227,.3461,.2943
                    ,-.0786,.4068,.1329,-.0604,.4068,.147,-.0786,.3676,.1329,-.114,.3416,.2109,-.0604,.3676,.147,-.0999,.3416,.2133,-.0999,.3658,.2133,-.12,.3508,.2948,-.12,.3461,.2948,-.0999,.3416,.2133,-.12,.3461,.2948,-.1227,.3508,.2943,-.12,.3508,.2948,-.1227,.3508,.2943,.063,.3366,.0604,0,.3471,.0575,.063,.3366,.0604
                    ,.0456,.4217,.0456,.0883,.3832,.0499,.0713,.3471,0,.1152,.3434,.0834,.1152,.3765,.0834,.1308,.3765,.0508,.0988,.3366,.0245,.1308,.3434,.0508,.0988,.3832,.0245,.1308,.3765,.0508,.1152,.3765,.0834,.1152,.3434,.0834,.2374,.3444,.0837,.2376,.3444,.0797,.2343,.3444,.0865,.2374,.3444,.0837,.2374,.3374,.0837
                    ,.2376,.3374,.0797,.2343,.3374,.0865,.2343,.3444,.0865,.1308,.3434,.0508,.2376,.3374,.0797,.2376,.3444,.0797
                ]),
                false);

                var _i;//indices & affected indices for shapekeys
                _i = new Uint32Array(588);
                _i.set([0,1,2,3,0,4,5,6,0,6,7,0,0,3,5,2,8,0,0,7,1,4,0,8,9,10,11,12,9,13,14,15,9,15,16,9,9,12,14,11,17,9,9,16,10,13,9,17,18,19
                ,20,21,18,22,23,24,18,24,25,18,18,21,23,20,26,18,18,25,19,22,18,26,27,28,29,30,27,31,32,33,27,33,34,27,27,30,32,29,35,27,27,34,28,31,27]);
                CONTIG(_i, 95, 35, 58);
                _i.set([52], 119);
                CONTIG(_i, 120, 59, 76);
                _i.set([69,66,70,44,77,78,79,41,80,48,59,81,82,83,84,85,86,87,88,89,52,90,91,92,93,94,95,96,97,91,98,99,100,49,101,50,102,103,104,99,105,106,107,108,109,84,110,111,112,113
                ,114,112,115,60,54,116,117,118,119,120,59,121,112], 138);
                CONTIG(_i, 201, 122, 134);
                _i.set([130,135,117,136,125,117,137,55,138,139,140,141,142,143,125,144,145,114,146,115,114,147,148,149,138,140,150,151,152,67,153,150], 214);
                CONTIG(_i, 246, 154, 166);
                _i.set([162,75,167,168,156,169,170,171,172,173,174,152,175,176,164,177,178,179,180,181,179,182,183,184,185,186,81,187,179,188,185,41,189,179,183,190,191,192,193,194,195,37,196,197,198,199,77,37,200,193
                ,185,201,186,202,203,204,205,204,206,181,207,182,181,208,209,193,210,196,211,212,199,36,213,37,39,214,215,216,52,43,45,217,218,48,219,49,51,57,52,54,117,55,57,220,221,59,112,60,62,222
                ,223,224,70,66,225,222,69], 259);
                CONTIG(_i, 366, 226, 242);
                _i.set([75,69,243,66,44,244,77,79,39,41,245,76,59,81,246,247,248,48,81,59,61,249,76,81,59,82,250,83,251,252,253,254,255,256,257,258,91,93,259,94,260,93,261,262,263,99,49,264,265,102
                ,266,103,99,267,268,269,270,271,84,83,272,112,121,113,112,114,115,54,273,116,274,275,276,59,48,121,277,278,279,125,280,126,281,282,283,284,285,132,286,287,130,117,116,288,117,125,289,138,290,139
                ,291,292,142,125,127,293,114,294,295,114,113,296,297,132,138,150,153,151,67,66,153,298,299,300,301,302,303,304,305,161,306,307,164,308,309,162,310,311,312,169,313,314,315,316,173,152,151,317,164,318
                ,319,179,320,180,179,181,182,321,41,185,81,76,322,323,324,185,325,81,179,326,327,191,193,328,194,37,193,196,329,330,199,37,331,332,185,333,334,335,336,203,337,338,204,181,339,340,181,180,341,193
                ,195], 383);
                CONTIG(_i, 584, 342, 345);
                this.setIndices(_i);

                this.setVerticesData(_B.VertexBuffer.NormalKind, new Float32Array([
                    0,1,0,-.2356,.5419,-.8067,.4005,.5524,-.731,.2356,.5419,.8067,.731,.5524,.4005,-.4005,.5524,.731,-.8067,.5419,.2356,-.731,.5524,-.4005,.8067,.5419,-.2356,0,1,0,.5398,.4631,.703,-.1147,.4731,.8735,-.5398,.4631,-.703,-.8735,.4731,-.1147,.1147,.4731,-.8735,.703,.4631,-.5398,.8735,.4731,.1147
                    ,-.703,.4631,.5398,0,1,0,-.0855,.3634,-.9277,.5933,.3721,-.7138,.0855,.3634,.9277,.7138,.3721,.5933,-.5933,.3721,.7138,-.9277,.3634,.0855,-.7138,.3721,-.5933,.9277,.3634,-.0855,0,1,0,.8847,.2868,-.3675,.8834,.294,.3649,-.8847,.2868,.3675,-.3649,.294,.8834,-.8834,.294,-.3649,-.3675,.2868,-.8847
                    ,.3649,.294,-.8834,.3675,.2868,.8847,.9662,.2155,-.1416,.3014,.9177,.2588,.6101,.3539,.7089,0,.6392,.769,.6101,.3539,.7089,.2338,.2617,.9364,.9662,.2155,-.1416,.6847,-.6853,-.2481,.499,-.7212,-.4805,.5437,.6392,.5437,.9662,.2155,-.1416,.6101,.3539,.7089,-.0928,-.886,-.4544,.5923,-.805,-.0349,-.5332,-.7487,-.3938
                    ,.769,.6392,0,.7568,.1592,-.6339,.9662,.2155,-.1416,-.5728,.6019,-.5564,.0981,.5493,-.8298,.053,.23,-.9717,.5437,.6392,-.5437,.053,.23,-.9717,-.0126,-.9998,-.0148,-.4623,-.7775,.4264,-.6606,-.6894,.2973,0,.6392,-.769,-.5728,.6019,-.5564,.053,.23,-.9717,-.6606,-.6894,.2973,-.8509,.3116,.423,-.6093,-.7868,.0983
                    ,-.5728,.6019,-.5564,-.769,.6392,0,-.9687,.1924,.1569,-.769,.6392,0,0,.6392,-.769,.769,.6392,0,-.6093,-.7868,.0983,.6658,-.6399,.3838,.1871,-.8462,.499,.7224,.516,-.4603,.9662,.2155,-.1416,-.5437,.6392,.5437,-.8509,.3116,.423,-.0911,-.9823,-.1635,.8112,.4844,-.3275,-.6011,.7408,-.2997,.7327,.6804,.0126
                    ,.6847,-.6853,-.2481,.8112,.4844,-.3275,.5923,-.805,-.0349,.053,.23,-.9717,.8112,.4844,-.3275,-.0928,-.886,-.4544,-.4493,.4492,-.7722,.053,.23,-.9717,-.6444,-.7328,-.2185,-.5559,.5141,-.6532,-.6011,.7408,-.2997,-.5332,-.7487,-.3938,-.6011,.7408,-.2997,.8112,.4844,-.3275,.7515,-.6521,.1001,.5923,-.805,-.0349,-.6444,-.7328,-.2185
                    ,.5915,.5141,-.6211,-.5451,-.597,-.5886,.5771,-.597,-.5572,.5915,.5141,-.6211,.5771,-.597,-.5572,-.6444,-.7328,-.2185,.5771,-.597,-.5572,-.5451,-.597,-.5886,-.5559,.5141,-.6532,.5915,.5141,-.6211,-.0027,-1,-.0007,.3311,-.801,-.4988,.0037,-1,.0042,-.5141,-.653,.5561,-.7129,.6067,.3515,-.2751,.9485,-.1569,-.6606,-.6894,.2973
                    ,-.7129,.6067,.3515,-.9687,.1924,.1569,.2464,-.6692,-.701,-.0928,-.886,-.4544,.0981,.5493,-.8298,.2464,-.6692,-.701,-.0952,.9879,-.1223,-.8233,.5666,-.0334,-.4484,.6003,-.6622,-.5141,-.653,.5561,-.8233,.5666,-.0334,-.5959,.6179,.5129,.2464,-.6692,-.701,.2417,.6733,-.6987,.3311,-.801,-.4988,-.4623,-.7775,.4264,-.7129,.6067,.3515
                    ,-.5959,.6179,.5129,.2417,.6733,-.6987,.2745,.5666,-.7768,-.4355,-.6299,-.6431,.281,-.604,-.7458,-.4484,.6003,-.6622,-.7968,-.604,-.0158,-.4355,-.6299,-.6431,.2745,.5666,-.7768,.2417,.6733,-.6987,-.7968,-.604,-.0158,.281,-.604,-.7458,-.4355,-.6299,-.6431,.3311,-.801,-.4988,-.7125,-.6444,-.2774,-.782,.6226,-.0298,-.6645,-.7031,-.2532
                    ,-.7155,.6953,-.0673,.2338,.2617,.9364,.6658,-.6399,.3838,.4044,.7185,.5658,.2338,.2617,.9364,-.7155,.6953,-.0673,-.8509,.3116,.423,-.6645,-.7031,-.2532,.4445,-.5635,.6962,.6206,-.7745,.1223,-.7155,.6953,-.0673,.5821,.6427,.498,-.782,.6226,-.0298,-.7125,-.6444,-.2774,.6658,-.6399,.3838,.5821,.6427,.498,-.6658,.5213,.5337
                    ,.4445,-.5635,.6962,-.6544,-.5635,.5042,.6206,-.7745,.1223,.4452,.5213,.728,.5821,.6427,.498,-.6658,.5213,.5337,-.6544,-.5635,.5042,-.6658,.5213,.5337,-.782,.6226,-.0298,-.01,-.9999,-.0044,-.131,-.6233,.7709,.017,-.9998,.0032,.3678,-.7232,-.5845,.3597,-.7607,-.5402,.1871,-.8462,.499,.0462,.3166,.9474,-.246,-.8334,.4948
                    ,-.246,-.8334,.4948,.6101,.3539,.7089,.499,-.7212,-.4805,-.131,-.6233,.7709,.3478,.4827,.8037,.2482,-.6589,.71,.2134,.9687,.1265,.7305,.4858,-.4799,.7669,.5336,.3565,-.0778,.6307,.7721,.0462,.3166,.9474,.3597,-.7607,-.5402,.4516,.7245,-.5207,.4516,.7245,-.5207,-.131,-.6233,.7709,.7669,.5336,.3565,.6376,-.6075,-.4736
                    ,.6865,-.6475,.3306,.3478,.4827,.8037,.2482,-.6589,.71,.6376,-.6075,-.4736,.2482,-.6589,.71,.6865,-.6475,.3306,.3478,.4827,.8037,.3678,-.7232,-.5845,.7305,.4858,-.4799,.7224,.516,-.4603,.5437,.6392,.5437,.6101,.3539,.7089,.9662,.2155,-.1416,.769,.6392,0,.9662,.2155,-.1416,.6847,-.6853,-.2481,0,.6392,-.769
                    ,.053,.23,-.9717,-.5437,.6392,-.5437,-.5728,.6019,-.5564,-.6606,-.6894,.2973,-.5728,.6019,-.5564,.769,.6392,0,.5437,.6392,.5437,0,.6392,.769,0,.6392,.769,-.5437,.6392,.5437,-.769,.6392,0,-.769,.6392,0,-.5437,.6392,-.5437,0,.6392,-.769,0,.6392,-.769,.5437,.6392,-.5437,.769,.6392,0
                    ,.769,.6392,0,0,.6392,.769,-.769,.6392,0,-.6093,-.7868,.0983,-.7125,-.6444,-.2774,-.5437,.6392,.5437,.3597,-.7607,-.5402,-.6093,-.7868,.0983,.499,-.7212,-.4805,.6847,-.6853,-.2481,.6847,-.6853,-.2481,-.6093,-.7868,.0983,-.4493,.4492,-.7722,.6847,-.6853,-.2481,.7568,.1592,-.6339,.8112,.4844,-.3275,.053,.23,-.9717
                    ,-.4493,.4492,-.7722,.8112,.4844,-.3275,-.0928,-.886,-.4544,-.5332,-.7487,-.3938,-.5451,-.597,-.5886,-.5332,-.7487,-.3938,-.6011,.7408,-.2997,.8112,.4844,-.3275,.7327,.6804,.0126,.7515,-.6521,.1001,-.6444,-.7328,-.2185,-.5559,.5141,-.6532,.7327,.6804,.0126,.5915,.5141,-.6211,-.6444,-.7328,-.2185,.7515,-.6521,.1001,.5771,-.597,-.5572
                    ,-.5559,.5141,-.6532,-.9687,.1924,.1569,-.6606,-.6894,.2973,-.4623,-.7775,.4264,-.7129,.6067,.3515,-.0928,-.886,-.4544,.053,.23,-.9717,.0981,.5493,-.8298,-.5959,.6179,.5129,-.5141,-.653,.5561,-.7968,-.604,-.0158,-.8233,.5666,-.0334,.2464,-.6692,-.701,.0981,.5493,-.8298,-.4623,-.7775,.4264,-.5141,-.653,.5561,-.5959,.6179,.5129
                    ,.2417,.6733,-.6987,-.4484,.6003,-.6622,-.4484,.6003,-.6622,-.8233,.5666,-.0334,.2745,.5666,-.7768,-.4355,-.6299,-.6431,-.7968,-.604,-.0158,.281,-.604,-.7458,.3311,-.801,-.4988,.2338,.2617,.9364,.1871,-.8462,.499,.6658,-.6399,.3838,.2338,.2617,.9364,.4044,.7185,.5658,-.7155,.6953,-.0673,-.6645,-.7031,-.2532,-.6544,-.5635,.5042
                    ,-.7155,.6953,-.0673,.4044,.7185,.5658,-.7125,-.6444,-.2774,-.6645,-.7031,-.2532,.6658,-.6399,.3838,.6206,-.7745,.1223,.5821,.6427,.498,.4452,.5213,.728,.4445,-.5635,.6962,.6206,-.7745,.1223,.4445,-.5635,.6962,-.6658,.5213,.5337,.4452,.5213,.728,-.6658,.5213,.5337,-.246,-.8334,.4948,.1871,-.8462,.499,-.246,-.8334,.4948
                    ,.6101,.3539,.7089,.3014,.9177,.2588,.499,-.7212,-.4805,-.131,-.6233,.7709,-.0778,.6307,.7721,.4516,.7245,-.5207,.3597,-.7607,-.5402,.3678,-.7232,-.5845,.7224,.516,-.4603,.4516,.7245,-.5207,-.0778,.6307,.7721,-.131,-.6233,.7709,.7669,.5336,.3565,.7305,.4858,-.4799,.3478,.4827,.8037,.7669,.5336,.3565,.6865,-.6475,.3306
                    ,.6376,-.6075,-.4736,.2482,-.6589,.71,.3478,.4827,.8037,.3678,-.7232,-.5845,.6376,-.6075,-.4736,.7305,.4858,-.4799
                ]),
                false);

                this.setVerticesData(_B.VertexBuffer.UVKind, new Float32Array([
                    .5,.5,.9547,.5,.8219,.8219,.0453,.5,.1781,.8219,.1781,.1781,.5,.0453,.8219,.1781,.5,.9547,.5,.5,.9547,.5,.8219,.8219,.0453,.5,.1781,.8219,.1781,.1781,.5,.0453,.8219,.1781,.5,.9547,.5,.5,.9547,.5,.8219,.8219,.0453,.5,.1781,.8219,.1781,.1781,.5,.0453
                    ,.8219,.1781,.5,.9547,.5,.5,.9547,.5,.8219,.8219,.0453,.5,.1781,.8219,.1781,.1781,.5,.0453,.8219,.1781,.5,.9547,.4184,.6151,.3781,.6598,.3625,.6174,.9602,.5203,.8445,.819,.8051,.7983,.8509,.1792,.7749,.1231,.817,.1043,.2466,.6151,.2994,.9304,.2434,.9304,.2207,.278,.1704,.2776
                    ,.1938,.2605,1,.4598,.8129,.1961,.8509,.1792,.5129,.8884,.5394,.8148,.5602,.9171,.9661,.4749,.7637,.2217,.2703,.2843,.3314,.2385,.3158,.3185,.6593,0,.4903,.2723,.4583,.2497,.4875,.3713,.5671,.3266,.5227,.3962,.4903,.2723,.728,.0487,.5354,.3042,.1229,.9411,.1582,.8593,.2434,.8932,.3076,.3774
                    ,.3469,.4758,.2543,.399,.8722,.1213,.8509,.1792,.9167,.4977,.7564,.773,.2048,.3926,.4277,.6151,.4382,.6779,.4184,.6807,.1648,.6462,.2161,.6475,.1686,.6619,.7637,.2217,.7821,.171,.0798,.8471,.1307,.8215,.1648,.8471,.0943,.7591,.1095,.616,.1281,.7619,.0811,.8175,.1281,.7619,.2161,.6475,.1969,.7226
                    ,.1686,.6619,.1521,.2164,.7355,.5711,.7295,.5606,.7355,.5605,.2434,.8561,.2328,.8593,.1521,.2164,.0943,.0748,.1006,.073,.4563,.8289,.4498,.8299,.3236,.2162,.3832,.1661,.3963,.1653,.406,.1737,.4947,.8216,.5156,.8093,0,.8792,.0567,.8401,.0798,.9076,.3017,.2058,.6444,.9129,.5959,.8088,.6373,.8072
                    ,.4937,.7248,.5557,.5605,.5583,.5605,.041,.7385,.0798,.6162,.0624,.744,.6373,.8072,.6115,.7229,.6336,.7221,.0166,.8297,.0567,.8401,.4807,.7251,.5033,.7333,.6276,.5626,.6319,.5605,.6321,.5625,.7321,.5889,.7295,.5846,.7321,.5846,.5602,.5622,.5033,.7333,.4583,.0017,.4537,.0001,.4563,0,.6336,.7221
                    ,.616,.4343,.693,.4912,.6767,.5125,.6424,.4,.7295,.8478,.6779,.7354,.7223,.7391,.3551,.6151,.3124,.7215,.2994,.6204,.4243,.5286,.4555,.6151,.4096,.5351,.3124,.7215,.3323,.8102,.3169,.8151,.3628,.4557,.6779,.7354,.6833,.6526,.7295,.5795,.7326,.5846,.7295,.5846,.656,.6504,.6745,.5609,.6833,.6526
                    ,.7564,.5564,.7532,.5605,.3522,.8999,.3169,.8151,.1551,.416,.1354,.4586,.1157,.4489,.1088,.4287,.1361,.3922,.763,.8689,.8441,.8664,.8189,.9111,.186,.4199,.8445,.819,.1592,.3585,.8788,.9338,.9953,.9934,.9915,1,.3768,.7097,.4184,.8189,.4141,.8205,.3564,.7014,.3551,.6396,.8472,.0767,.9092,.0947
                    ,.3973,.7018,.8788,.9338,.7295,.5755,.7374,.5713,.7374,.5755,.7295,.5795,.7374,.5795,0,.4891,.0056,.4954,.0014,.4934,.4098,.8188,.8914,.063,1,.0067,.4093,.6585,.9953,.5388,.8445,.819,.8509,.1792,.2966,.6151,.2994,.9304,.1674,.2995,.9222,.4977,.7637,.2217,.6878,.0202,.4903,.2723,.4875,.3713
                    ,.4903,.2723,.2434,.8932,.2434,.9411,.2081,.975,.2081,.975,.1582,.975,.1229,.9411,.1229,.9411,.1229,.8932,.1582,.8593,.1582,.8593,.2081,.8593,.2434,.8932,.2434,.8932,.2081,.975,.1229,.9411,.3076,.3774,.3628,.4557,.7564,.0687,.8472,.0767,.3076,.3774,.1592,.3585,.1674,.2995,.1674,.2995,.3076,.3774
                    ,.4563,.6212,.1648,.6462,.2434,.6151,.2161,.6475,.7637,.2217,.7564,.1844,.7821,.171,.0798,.8471,.0811,.8175,.0984,.6151,.0811,.8175,.1281,.7619,.2161,.6475,.2293,.7128,.1329,.2219,.1521,.2164,.7295,.5713,.2293,.7128,.2434,.8561,.1521,.2164,.1329,.2219,.0943,.0748,.4563,.8289,.4583,.9001,0,.8792
                    ,.0166,.8297,.0567,.8401,.6444,.9129,.5602,.9129,.5959,.8088,.4807,.7251,.041,.7385,.0754,.6151,.0798,.6162,.6373,.8072,.5959,.8088,.0166,.8297,.041,.7385,.4807,.7251,.5033,.7333,.6274,.5606,.7321,.5889,.7295,.5889,.5602,.5622,.4563,0,.4583,.0017,.4537,.0001,.6336,.7221,.7295,.8478,.6444,.8478
                    ,.6779,.7354,.3551,.6151,.3383,.7257,.3124,.7215,.4243,.5286,.4583,.6139,.3124,.7215,.3383,.7257,.3628,.4557,.4243,.5286,.6779,.7354,.656,.6504,.6833,.6526,.7326,.5795,.7326,.5846,.656,.6504,.6692,.5605,.7564,.5564,.3551,.899,.3522,.8999,.186,.4199,.763,.8689,.186,.4199,.8445,.819,.866,.878
                    ,.1592,.3585,.8788,.9338,.8968,.9021,.3973,.7018,.8472,.0767,.8914,.063,.4093,.6585,.3973,.7018,.8968,.9021,.8788,.9338,.7295,.5755,.7295,.5713,.7295,.5795,.7295,.5755,.0014,.4934,0,.4891,.0056,.4954,.4098,.8188,.8914,.063,.9963,0,1,.0067
                ]),
                false);

                geo = (_B.Tools.Now - geo) / 1000;
                this.setMaterialByID("map01.Multimaterial#0");
                this.subMeshes = [];
                new _B.SubMesh(0, 0, 36, 0, 96, this);
                new _B.SubMesh(1, 36, 310, 96, 492, this);
                if (scene._selectionOctree) {
                    scene.createOrUpdateSelectionOctree();
                }
            }
            if (this.postConstruction) this.postConstruction();
            load = (_B.Tools.Now - load) / 1000;
            _B.Tools.Log("defined mesh: " + this.name + (cloning ? " (cloned)" : "") + " completed:  " + load.toFixed(2) + ", geometry:  " + geo.toFixed(2) + ", skey:  " + shape.toFixed(2) + " secs");
            if (matLoaded){
                if (typeof this.grandEntrance == "function") this.grandEntrance();
                else makeVisible(this);

            } else waitingMeshes.push(this);
        }

        choinka_003.prototype.dispose = function (doNotRecurse) {
            _super.prototype.dispose.call(this, doNotRecurse);
            if (this.skeleton) this.skeleton.dispose();
        };
        return choinka_003;
    })(BABYLON.Mesh);
    map01.choinka_003 = choinka_003;

    var choinka_002 = (function (_super) {
        __extends(choinka_002, _super);
        function choinka_002(name, scene, materialsRootDir, source) {
            _super.call(this, name, scene, null, source, true);

            if (!materialsRootDir) { materialsRootDir = "./"; }
            defineMaterials(scene, materialsRootDir); //embedded version check
            var cloning = source && source !== null;
            var load = _B.Tools.Now;
            var geo = 0;
            var shape = 0;
            this.position.x  = 3.0581;
            this.position.y  = -.1267;
            this.position.z  = 14.6701;
            this.rotation.x  = 0;
            this.rotation.y  = 1.7375;
            this.rotation.z  = 0;
            this.scaling.x   = 4.3854;
            this.scaling.y   = 4.3854;
            this.scaling.z   = 4.3854;

            this.id = this.name;
            this.billboardMode  = 0;
            this.isVisible  = false; //always false; evaluated again at bottom
            this.setEnabled(true);
            this.checkCollisions = false;
            this.receiveShadows  = false;
            this.castShadows  = false;
            if (!cloning){
                geo = _B.Tools.Now;
                this.setVerticesData(_B.VertexBuffer.PositionKind, new Float32Array([
                    0,1.0051,0,-.1442,.2075,-.4937,.254,.2075,-.4636,.1442,.2075,.4937,.4636,.2075,.254,-.254,.2075,.4636,-.4937,.2075,.1442,-.4636,.2075,-.254,.4937,.2075,-.1442,0,1.338,0,.2257,.6287,.294,-.0496,.6287,.3777,-.2257,.6287,-.294,-.3777,.6287,-.0496,.0496,.6287,-.3777,.294,.6287,-.2257,.3777,.6287,.0496
                    ,-.294,.6287,.2257,0,1.7097,0,-.0254,1.0005,-.2755,.1818,1.0005,-.2186,.0254,1.0005,.2755,.2186,1.0005,.1818,-.1818,1.0005,.2186,-.2755,1.0005,.0254,-.2186,1.0005,-.1818,.2755,1.0005,-.0254,0,2.0471,0,.1961,1.3379,-.0814,.2017,1.3379,.0833,-.1961,1.3379,.0814,-.0833,1.3379,.2017,-.2017,1.3379,-.0833,-.0814,1.3379,-.1961
                    ,.0833,1.3379,-.2017,.0814,1.3379,.1961,.0644,.0667,0,.0883,.0283,.0499,.0456,.0667,.0456,0,.0667,.0644,.0406,.3562,.0406,.0456,.0667,.0456,.0644,.0667,0,.0504,-.0079,-.0504,.0713,-.0079,0,.0406,.3562,.0406,.0644,.0667,0,.0456,.0667,.0456,0,-.0079,-.0575,.0427,-.009,-.0693,.0188,-.009,-.0792
                    ,.0575,.3562,0,.0456,.0667,-.0456,.0644,.0667,0,-.0456,.0667,-.0456,-.0859,.0312,-.1032,0,.0667,-.0644,.0406,.3562,-.0406,0,.0667,-.0644,-.0406,-.0079,-.0406,-.1034,-.0054,-.0674,-.0713,-.0079,0,0,.3562,-.0575,-.0456,.0667,-.0456,0,.0667,-.0644,-.0644,.0667,0,-.0504,-.0079,.0504,-.0713,-.0079,0
                    ,-.0406,.3562,-.0406,-.0456,.0667,-.0456,-.0575,.3562,0,0,.3562,-.0575,.0575,.3562,0,-.0504,-.0079,.0504,-.0604,.0127,.147,0,-.0079,.0575,-.0406,.3562,.0406,-.0456,.0667,.0456,.0988,.0283,.0245,.0644,.0667,0,-.0406,.3562,.0406,-.0456,.0667,.0456,.0406,-.0079,.0406,.0427,.0348,-.0693,.0439,.0278,-.1275
                    ,.0615,.0278,-.127,.0504,-.0079,-.0504,.0427,.0348,-.0693,.0427,-.009,-.0693,0,.0667,-.0644,.0427,.0348,-.0693,0,-.0079,-.0575,.0188,.0348,-.0792,0,.0667,-.0644,.0439,-.002,-.1275,.0537,.0001,-.2666,.0439,.0278,-.1275,.0188,-.009,-.0792,.0439,.0278,-.1275,.0427,.0348,-.0693,.0615,-.002,-.127,.0427,-.009,-.0693
                    ,.0439,-.002,-.1275,.0595,.0001,-.2664,.0537,-.0097,-.2666,.0595,-.0097,-.2664,.0595,.0001,-.2664,.0595,-.0097,-.2664,.0615,-.002,-.127,.0537,-.0097,-.2666,.0439,-.002,-.1275,.0537,.0001,-.2666,.0595,.0001,-.2664,-.1021,-.0054,-.0889,-.1647,-.0065,-.1199,-.1759,-.0065,-.1176,-.1823,-.0065,-.108,-.1034,.0312,-.0674,-.1021,.0312,-.0889
                    ,-.0713,-.0079,0,-.1034,.0312,-.0674,-.0644,.0667,0,-.0859,-.0054,-.1032,0,-.0079,-.0575,-.0859,.0312,-.1032,-.0859,-.0054,-.1032,-.1759,.013,-.1176,-.2674,-.0024,-.2488,-.2661,-.0024,-.2507,-.1823,-.0065,-.108,-.2674,-.0024,-.2488,-.1823,.013,-.108,-.0859,-.0054,-.1032,-.1647,.013,-.1199,-.1647,-.0065,-.1199,-.1034,-.0054,-.0674
                    ,-.1034,.0312,-.0674,-.1823,.013,-.108,-.1647,.013,-.1199,-.2638,-.0024,-.2512,-.2661,-.0064,-.2507,-.2638,-.0064,-.2512,-.2661,-.0024,-.2507,-.2674,-.0064,-.2488,-.2661,-.0064,-.2507,-.2638,-.0024,-.2512,-.1647,.013,-.1199,-.2674,-.0064,-.2488,-.2638,-.0064,-.2512,-.2661,-.0064,-.2507,-.1647,-.0065,-.1199,-.0786,.0127,.1329,-.114,.0109,.2109
                    ,-.114,-.0133,.2109,-.0786,.0518,.1329,0,.0667,.0644,-.0604,.0127,.147,-.0604,.0518,.147,0,.0667,.0644,-.0786,.0518,.1329,-.0456,.0667,.0456,-.114,-.0133,.2109,-.12,-.0088,.2948,-.0999,-.0133,.2133,-.0786,.0518,.1329,-.0999,.0109,.2133,-.114,.0109,.2109,-.0786,.0127,.1329,-.0604,.0127,.147,-.0999,.0109,.2133
                    ,-.1227,-.0042,.2943,-.12,-.0088,.2948,-.1227,-.0088,.2943,-.0999,-.0133,.2133,-.12,-.0042,.2948,-.0999,.0109,.2133,-.1227,-.0042,.2943,-.1227,-.0088,.2943,-.1227,-.0042,.2943,-.114,.0109,.2109,.0883,-.0183,.0499,.1152,-.0116,.0834,.1297,-.0116,.0703,.1308,-.0116,.0508,.0988,-.0183,.0245,0,-.0079,.0575,.063,.0283,.0604
                    ,.063,-.0183,.0604,.063,-.0183,.0604,.0456,.0667,.0456,.0713,-.0079,0,.1152,-.0116,.0834,.2343,-.0106,.0865,.2343,-.0175,.0865,.1297,.0215,.0703,.2376,-.0106,.0797,.2374,-.0106,.0837,.1152,.0215,.0834,.063,.0283,.0604,.0988,-.0183,.0245,.1308,.0215,.0508,.1308,.0215,.0508,.1152,.0215,.0834,.1152,-.0116,.0834
                    ,.2374,-.0106,.0837,.2376,-.0175,.0797,.2374,-.0175,.0837,.2343,-.0106,.0865,.2343,-.0175,.0865,.2376,-.0175,.0797,.2343,-.0175,.0865,.2374,-.0175,.0837,.2343,-.0106,.0865,.1308,-.0116,.0508,.2376,-.0106,.0797,.0988,.0283,.0245,0,.3562,.0575,.0644,.0667,0,.0406,.3562,.0406,.0575,.3562,0,.0644,.0667,0
                    ,.0504,-.0079,-.0504,0,.3562,-.0575,0,.0667,-.0644,-.0456,.0667,-.0456,-.0575,.3562,0,.0575,.3562,0,.0406,.3562,.0406,0,.3562,.0575,0,.3562,.0575,-.0406,.3562,.0406,-.0406,.3562,-.0406,0,.3562,-.0575,0,.3562,-.0575,.0406,.3562,-.0406,.0575,.3562,0,.0575,.3562,0,0,.3562,.0575
                    ,-.0504,-.0079,.0504,-.0786,.0127,.1329,-.0575,.3562,0,.0988,-.0183,.0245,-.0406,.3562,.0406,-.0504,-.0079,.0504,.0713,-.0079,0,.0504,-.0079,-.0504,.0504,-.0079,-.0504,-.0504,-.0079,.0504,.0188,.0348,-.0792,.0504,-.0079,-.0504,.0456,.0667,-.0456,.0427,.0348,-.0693,0,.0667,-.0644,.0188,.0348,-.0792,.0427,.0348,-.0693
                    ,0,-.0079,-.0575,.0188,-.009,-.0792,.0537,-.0097,-.2666,.0188,-.009,-.0792,.0439,.0278,-.1275,.0427,.0348,-.0693,.0615,.0278,-.127,.0615,-.002,-.127,.0439,-.002,-.1275,.0537,.0001,-.2666,.0615,.0278,-.127,.0595,.0001,-.2664,.0615,-.002,-.127,.0595,-.0097,-.2664,.0537,-.0097,-.2666,.0537,.0001,-.2666,-.0644,.0667,0
                    ,-.0713,-.0079,0,-.1034,-.0054,-.0674,-.1034,.0312,-.0674,0,-.0079,-.0575,0,.0667,-.0644,-.0859,.0312,-.1032,-.1823,.013,-.108,-.1823,-.0065,-.108,-.2674,-.0064,-.2488,-.2674,-.0024,-.2488,-.0859,-.0054,-.1032,-.0859,.0312,-.1032,-.1034,-.0054,-.0674,-.1823,-.0065,-.108,-.1823,.013,-.108,-.1647,.013,-.1199,-.2661,-.0024,-.2507
                    ,-.2661,-.0024,-.2507,-.2674,-.0024,-.2488,-.2638,-.0024,-.2512,-.2661,-.0064,-.2507,-.2674,-.0064,-.2488,-.2638,-.0064,-.2512,-.1647,-.0065,-.1199,0,.0667,.0644,0,-.0079,.0575,-.0604,.0127,.147,0,.0667,.0644,-.0604,.0518,.147,-.0786,.0518,.1329,-.114,-.0133,.2109,-.1227,-.0088,.2943,-.0786,.0518,.1329,-.0604,.0518,.147
                    ,-.0786,.0127,.1329,-.114,-.0133,.2109,-.0604,.0127,.147,-.0999,-.0133,.2133,-.0999,.0109,.2133,-.12,-.0042,.2948,-.12,-.0088,.2948,-.0999,-.0133,.2133,-.12,-.0088,.2948,-.1227,-.0042,.2943,-.12,-.0042,.2948,-.1227,-.0042,.2943,.063,-.0183,.0604,0,-.0079,.0575,.063,-.0183,.0604,.0456,.0667,.0456,.0883,.0283,.0499
                    ,.0713,-.0079,0,.1152,-.0116,.0834,.1152,.0215,.0834,.1308,.0215,.0508,.0988,-.0183,.0245,.1308,-.0116,.0508,.0988,.0283,.0245,.1308,.0215,.0508,.1152,.0215,.0834,.2374,-.0106,.0837,.2376,-.0106,.0797,.2343,-.0106,.0865,.2374,-.0106,.0837,.2374,-.0175,.0837,.2376,-.0175,.0797,.2343,-.0175,.0865,.2343,-.0106,.0865
                    ,.1308,-.0116,.0508,.2376,-.0175,.0797,.2376,-.0106,.0797
                ]),
                false);

                var _i;//indices & affected indices for shapekeys
                _i = new Uint32Array(588);
                _i.set([0,1,2,3,0,4,5,6,0,6,7,0,0,3,5,2,8,0,0,7,1,4,0,8,9,10,11,12,9,13,14,15,9,15,16,9,9,12,14,11,17,9,9,16,10,13,9,17,18,19
                ,20,21,18,22,23,24,18,24,25,18,18,21,23,20,26,18,18,25,19,22,18,26,27,28,29,30,27,31,32,33,27,33,34,27,27,30,32,29,35,27,27,34,28,31,27]);
                CONTIG(_i, 95, 35, 58);
                _i.set([52], 119);
                CONTIG(_i, 120, 59, 68);
                _i.set([65,69,70,71,72,73,74,75,65,76,77,44,78,79,80,39,81,48,59,82,83,84,85,86,87,88,89,90,52,91,92,93,94,95,96,97,98,92,99,100,101,49,102,50,103,104,105,100,106,107
                ,108,109,110,85,111,112,113,114,115,113,116,60,54,117,118,119,120,121,59,122,113], 130);
                CONTIG(_i, 201, 123, 135);
                _i.set([131,136,118,137,126,118,138,55,139,140,141,142,143,144,126,145,146,115,147,116,115,148,149,150,139,141,151,152,153,66,154,151], 214);
                CONTIG(_i, 246, 155, 167);
                _i.set([163,74,168,169,157,170,171,172,173,174,175,153,176,177,165,178,179,180,181,182,180,183,184,185,186,187,82,188,180,189,186,39,190,180,184,191,192,193,194,195,196,37,197,198,199,200,78,37,201,194
                ,187,202,203,204,205,206,207,206,208,182,209,183,182,210,211,194,212,197,213,214,200,36,215,37,39,216,40,217,52,43,218,219,220,48,221,49,51,57,52,54,118,55,57,222,223,59,113,60,62,68
                ,224,65,77,66,68,225,65,226,227,228,229,230,70,70,231,232,233,234,235,236,237,70,238,239,74,65,240,76,44,241,78,242,216,39,243,75,59,82,244,245,246,48,82,59,61,247,75,82,59,83
                ,248,84,249,250,251,252,253,254,255,256,92,94,257,95,258,94,259,260,261,100,49,262,263,103,264,104,100,265,266,267,268,269,85,84,270,113,122,114,113,115,116,54,271,117,272,273,274,59,48,122
                ,275,276,277,126,278,127,279,280,281,282,283,133,284,285,131,118,117,286,118,126,287,139,288,140,289,290,143,126,128,291,115,292,293,115,114,294,295,133,139,151,154,152,66,77,154,296,297,298,299,300
                ,301,302,303,162,304,305,165,306,307,163,308,309,310,170,311,312,313,314,174,153,152,315,165,316,317,180,318,181,180,182,183,319,39,186,82,75,320,321,322,186,323,82,180,324,325,192,194,326,195,37
                ,194,197,327,328,200,37,329,330,187,186,331,332,333,205,334,335,206,182,336,337,182,181,338,194,196], 259);
                CONTIG(_i, 584, 339, 342);
                this.setIndices(_i);

                this.setVerticesData(_B.VertexBuffer.NormalKind, new Float32Array([
                    0,1,0,-.2356,.5419,-.8067,.4005,.5524,-.731,.2356,.5419,.8067,.731,.5524,.4005,-.4005,.5524,.731,-.8067,.5419,.2356,-.731,.5524,-.4005,.8067,.5419,-.2356,0,1,0,.5398,.4631,.703,-.1147,.4731,.8735,-.5398,.4631,-.703,-.8735,.4731,-.1147,.1147,.4731,-.8735,.703,.4631,-.5398,.8735,.4731,.1147
                    ,-.703,.4631,.5398,0,1,0,-.0855,.3634,-.9277,.5933,.3721,-.7138,.0855,.3634,.9277,.7138,.3721,.5933,-.5933,.3721,.7138,-.9277,.3634,.0855,-.7138,.3721,-.5933,.9277,.3634,-.0855,0,1,0,.8847,.2868,-.3675,.8834,.294,.3649,-.8847,.2868,.3675,-.3649,.294,.8834,-.8834,.294,-.3649,-.3675,.2868,-.8847
                    ,.3649,.294,-.8834,.3675,.2868,.8847,.9662,.2155,-.1416,.3014,.9177,.2588,.6101,.3539,.7089,.2338,.2617,.9364,.5437,.6392,.5437,.6101,.3539,.7089,.9662,.2155,-.1416,.6847,-.6853,-.2481,.499,-.7212,-.4805,.5437,.6392,.5437,.9662,.2155,-.1416,.6101,.3539,.7089,-.0928,-.886,-.4544,.5923,-.805,-.0349,-.5332,-.7487,-.3938
                    ,.769,.6392,0,.7568,.1592,-.6339,.9662,.2155,-.1416,-.5728,.6019,-.5564,.0981,.5493,-.8298,.053,.23,-.9717,.5437,.6392,-.5437,.053,.23,-.9717,-.0126,-.9998,-.0148,-.4623,-.7775,.4264,-.6606,-.6894,.2973,0,.6392,-.769,-.5728,.6019,-.5564,.053,.23,-.9717,-.9687,.1924,.1569,-.6093,-.7868,.0983,-.6606,-.6894,.2973
                    ,-.5437,.6392,-.5437,-.5728,.6019,-.5564,-.769,.6392,0,0,.6392,-.769,.769,.6392,0,-.6093,-.7868,.0983,.6658,-.6399,.3838,.1871,-.8462,.499,-.5437,.6392,.5437,-.8509,.3116,.423,.7224,.516,-.4603,.9662,.2155,-.1416,-.5437,.6392,.5437,-.8509,.3116,.423,-.0911,-.9823,-.1635,.8112,.4844,-.3275,-.6011,.7408,-.2997
                    ,.7327,.6804,.0126,.6847,-.6853,-.2481,.8112,.4844,-.3275,.5923,-.805,-.0349,.053,.23,-.9717,.8112,.4844,-.3275,-.0928,-.886,-.4544,-.4493,.4492,-.7722,.053,.23,-.9717,-.6444,-.7328,-.2185,-.5559,.5141,-.6532,-.6011,.7408,-.2997,-.5332,-.7487,-.3938,-.6011,.7408,-.2997,.8112,.4844,-.3275,.7515,-.6521,.1001,.5923,-.805,-.0349
                    ,-.6444,-.7328,-.2185,.5915,.5141,-.6211,-.5451,-.597,-.5886,.5771,-.597,-.5572,.5915,.5141,-.6211,.5771,-.597,-.5572,.7515,-.6521,.1001,-.5451,-.597,-.5886,-.6444,-.7328,-.2185,-.5559,.5141,-.6532,.5915,.5141,-.6211,-.0027,-1,-.0007,.3311,-.801,-.4988,.0037,-1,.0042,-.5141,-.653,.5561,-.7129,.6067,.3515,-.2751,.9485,-.1569
                    ,-.6606,-.6894,.2973,-.7129,.6067,.3515,-.9687,.1924,.1569,.2464,-.6692,-.701,-.0928,-.886,-.4544,.0981,.5493,-.8298,.2464,-.6692,-.701,-.0952,.9879,-.1223,-.8233,.5666,-.0334,-.4484,.6003,-.6622,-.5141,-.653,.5561,-.8233,.5666,-.0334,-.5959,.6179,.5129,.2464,-.6692,-.701,.2417,.6733,-.6987,.3311,-.801,-.4988,-.4623,-.7775,.4264
                    ,-.7129,.6067,.3515,-.5959,.6179,.5129,.2417,.6733,-.6987,.2745,.5666,-.7768,-.4355,-.6299,-.6431,.281,-.604,-.7458,-.4484,.6003,-.6622,-.7968,-.604,-.0158,-.4355,-.6299,-.6431,.2745,.5666,-.7768,.2417,.6733,-.6987,-.7968,-.604,-.0158,.281,-.604,-.7458,-.4355,-.6299,-.6431,.3311,-.801,-.4988,-.7125,-.6444,-.2774,-.782,.6226,-.0298
                    ,-.6645,-.7031,-.2532,-.7155,.6953,-.0673,.2338,.2617,.9364,.6658,-.6399,.3838,.4044,.7185,.5658,.2338,.2617,.9364,-.7155,.6953,-.0673,-.8509,.3116,.423,-.6645,-.7031,-.2532,.4445,-.5635,.6962,.6206,-.7745,.1223,-.7155,.6953,-.0673,.5821,.6427,.498,-.782,.6226,-.0298,-.7125,-.6444,-.2774,.6658,-.6399,.3838,.5821,.6427,.498
                    ,-.6658,.5213,.5337,.4445,-.5635,.6962,-.6544,-.5635,.5042,.6206,-.7745,.1223,.4452,.5213,.728,.5821,.6427,.498,-.6658,.5213,.5337,-.6544,-.5635,.5042,-.6658,.5213,.5337,-.782,.6226,-.0298,-.01,-.9999,-.0044,-.131,-.6233,.7709,.017,-.9998,.0032,.3678,-.7232,-.5845,.3597,-.7607,-.5402,.1871,-.8462,.499,.0462,.3166,.9474
                    ,-.246,-.8334,.4948,-.246,-.8334,.4948,.6101,.3539,.7089,.499,-.7212,-.4805,-.131,-.6233,.7709,.3478,.4827,.8037,.2482,-.6589,.71,.2134,.9687,.1265,.7305,.4858,-.4799,.7669,.5336,.3565,-.0778,.6307,.7721,.0462,.3166,.9474,.3597,-.7607,-.5402,.4516,.7245,-.5207,.4516,.7245,-.5207,-.0778,.6307,.7721,-.131,-.6233,.7709
                    ,.7669,.5336,.3565,.6376,-.6075,-.4736,.6865,-.6475,.3306,.3478,.4827,.8037,.2482,-.6589,.71,.6376,-.6075,-.4736,.2482,-.6589,.71,.6865,-.6475,.3306,.3478,.4827,.8037,.3678,-.7232,-.5845,.7305,.4858,-.4799,.7224,.516,-.4603,0,.6392,.769,.9662,.2155,-.1416,.5437,.6392,.5437,.769,.6392,0,.9662,.2155,-.1416
                    ,.6847,-.6853,-.2481,0,.6392,-.769,.053,.23,-.9717,-.5728,.6019,-.5564,-.769,.6392,0,.769,.6392,0,.5437,.6392,.5437,0,.6392,.769,0,.6392,.769,-.5437,.6392,.5437,-.5437,.6392,-.5437,0,.6392,-.769,0,.6392,-.769,.5437,.6392,-.5437,.769,.6392,0,.769,.6392,0,0,.6392,.769
                    ,-.6093,-.7868,.0983,-.7125,-.6444,-.2774,-.769,.6392,0,.3597,-.7607,-.5402,-.5437,.6392,.5437,-.6093,-.7868,.0983,.499,-.7212,-.4805,.6847,-.6853,-.2481,.6847,-.6853,-.2481,-.6093,-.7868,.0983,-.4493,.4492,-.7722,.6847,-.6853,-.2481,.7568,.1592,-.6339,.8112,.4844,-.3275,.053,.23,-.9717,-.4493,.4492,-.7722,.8112,.4844,-.3275
                    ,-.0928,-.886,-.4544,-.5332,-.7487,-.3938,-.5451,-.597,-.5886,-.5332,-.7487,-.3938,-.6011,.7408,-.2997,.8112,.4844,-.3275,.7327,.6804,.0126,.7515,-.6521,.1001,-.6444,-.7328,-.2185,-.5559,.5141,-.6532,.7327,.6804,.0126,.5915,.5141,-.6211,.7515,-.6521,.1001,.5771,-.597,-.5572,-.5451,-.597,-.5886,-.5559,.5141,-.6532,-.9687,.1924,.1569
                    ,-.6606,-.6894,.2973,-.4623,-.7775,.4264,-.7129,.6067,.3515,-.0928,-.886,-.4544,.053,.23,-.9717,.0981,.5493,-.8298,-.5959,.6179,.5129,-.5141,-.653,.5561,-.7968,-.604,-.0158,-.8233,.5666,-.0334,.2464,-.6692,-.701,.0981,.5493,-.8298,-.4623,-.7775,.4264,-.5141,-.653,.5561,-.5959,.6179,.5129,.2417,.6733,-.6987,-.4484,.6003,-.6622
                    ,-.4484,.6003,-.6622,-.8233,.5666,-.0334,.2745,.5666,-.7768,-.4355,-.6299,-.6431,-.7968,-.604,-.0158,.281,-.604,-.7458,.3311,-.801,-.4988,.2338,.2617,.9364,.1871,-.8462,.499,.6658,-.6399,.3838,.2338,.2617,.9364,.4044,.7185,.5658,-.7155,.6953,-.0673,-.6645,-.7031,-.2532,-.6544,-.5635,.5042,-.7155,.6953,-.0673,.4044,.7185,.5658
                    ,-.7125,-.6444,-.2774,-.6645,-.7031,-.2532,.6658,-.6399,.3838,.6206,-.7745,.1223,.5821,.6427,.498,.4452,.5213,.728,.4445,-.5635,.6962,.6206,-.7745,.1223,.4445,-.5635,.6962,-.6658,.5213,.5337,.4452,.5213,.728,-.6658,.5213,.5337,-.246,-.8334,.4948,.1871,-.8462,.499,-.246,-.8334,.4948,.6101,.3539,.7089,.3014,.9177,.2588
                    ,.499,-.7212,-.4805,-.131,-.6233,.7709,-.0778,.6307,.7721,.4516,.7245,-.5207,.3597,-.7607,-.5402,.3678,-.7232,-.5845,.7224,.516,-.4603,.4516,.7245,-.5207,-.0778,.6307,.7721,.7669,.5336,.3565,.7305,.4858,-.4799,.3478,.4827,.8037,.7669,.5336,.3565,.6865,-.6475,.3306,.6376,-.6075,-.4736,.2482,-.6589,.71,.3478,.4827,.8037
                    ,.3678,-.7232,-.5845,.6376,-.6075,-.4736,.7305,.4858,-.4799
                ]),
                false);

                this.setVerticesData(_B.VertexBuffer.UVKind, new Float32Array([
                    .5,.5,.9547,.5,.8219,.8219,.0453,.5,.1781,.8219,.1781,.1781,.5,.0453,.8219,.1781,.5,.9547,.5,.5,.9547,.5,.8219,.8219,.0453,.5,.1781,.8219,.1781,.1781,.5,.0453,.8219,.1781,.5,.9547,.5,.5,.9547,.5,.8219,.8219,.0453,.5,.1781,.8219,.1781,.1781,.5,.0453
                    ,.8219,.1781,.5,.9547,.5,.5,.9547,.5,.8219,.8219,.0453,.5,.1781,.8219,.1781,.1781,.5,.0453,.8219,.1781,.5,.9547,.4184,.6151,.3781,.6598,.3625,.6174,.8051,.7983,.9953,.5388,.8445,.819,.8509,.1792,.7749,.1231,.817,.1043,.2466,.6151,.2994,.9304,.2434,.9304,.2207,.278,.1704,.2776
                    ,.1938,.2605,1,.4598,.8129,.1961,.8509,.1792,.5129,.8884,.5394,.8148,.5602,.9171,.9661,.4749,.7637,.2217,.2703,.2843,.3314,.2385,.3158,.3185,.6593,0,.4903,.2723,.4583,.2497,.5354,.3042,.5227,.3962,.4875,.3713,.6878,.0202,.4903,.2723,.1229,.9411,.1582,.8593,.2434,.8932,.3076,.3774,.3469,.4758
                    ,.2543,.399,.7564,.0687,.5671,.3266,.8722,.1213,.8509,.1792,.9167,.4977,.7564,.773,.2048,.3926,.4277,.6151,.4382,.6779,.4184,.6807,.1648,.6462,.2161,.6475,.1686,.6619,.7637,.2217,.7821,.171,.0798,.8471,.1307,.8215,.1648,.8471,.0943,.7591,.1095,.616,.1281,.7619,.0811,.8175,.1281,.7619,.2161,.6475
                    ,.1969,.7226,.1686,.6619,.1521,.2164,.7355,.5711,.7295,.5606,.7355,.5605,.2434,.8561,.2328,.8593,.1329,.2219,.1006,.073,.1521,.2164,.4563,.8289,.4498,.8299,.3236,.2162,.3832,.1661,.3963,.1653,.406,.1737,.4947,.8216,.5156,.8093,0,.8792,.0567,.8401,.0798,.9076,.3017,.2058,.6444,.9129,.5959,.8088
                    ,.6373,.8072,.4937,.7248,.5557,.5605,.5583,.5605,.041,.7385,.0798,.6162,.0624,.744,.6373,.8072,.6115,.7229,.6336,.7221,.0166,.8297,.0567,.8401,.4807,.7251,.5033,.7333,.6276,.5626,.6319,.5605,.6321,.5625,.7321,.5889,.7295,.5846,.7321,.5846,.5602,.5622,.5033,.7333,.4583,.0017,.4537,.0001,.4563,0
                    ,.6336,.7221,.616,.4343,.693,.4912,.6767,.5125,.6424,.4,.7295,.8478,.6779,.7354,.7223,.7391,.3551,.6151,.3124,.7215,.2994,.6204,.4243,.5286,.4555,.6151,.4096,.5351,.3124,.7215,.3323,.8102,.3169,.8151,.3628,.4557,.6779,.7354,.6833,.6526,.7295,.5795,.7326,.5846,.7295,.5846,.656,.6504,.6745,.5609
                    ,.6833,.6526,.7564,.5564,.7532,.5605,.3522,.8999,.3169,.8151,.1551,.416,.1354,.4586,.1157,.4489,.1088,.4287,.1361,.3922,.763,.8689,.8441,.8664,.8189,.9111,.186,.4199,.8445,.819,.1592,.3585,.8788,.9338,.9953,.9934,.9915,1,.3768,.7097,.4184,.8189,.4141,.8205,.3564,.7014,.3551,.6396,.8472,.0767
                    ,.9092,.0947,.3973,.7018,.8968,.9021,.8788,.9338,.7295,.5755,.7374,.5713,.7374,.5755,.7295,.5795,.7374,.5795,0,.4891,.0056,.4954,.0014,.4934,.4098,.8188,.8914,.063,1,.0067,.4093,.6585,.9602,.5203,.8509,.1792,.2466,.6151,.2966,.6151,.2994,.9304,.1674,.2995,.9222,.4977,.7637,.2217,.4903,.2723
                    ,.728,.0487,.2434,.8932,.2434,.9411,.2081,.975,.2081,.975,.1582,.975,.1229,.8932,.1582,.8593,.1582,.8593,.2081,.8593,.2434,.8932,.2434,.8932,.2081,.975,.3076,.3774,.3628,.4557,.728,.0487,.8472,.0767,.9167,.4977,.3076,.3774,.1592,.3585,.1674,.2995,.1674,.2995,.3076,.3774,.4563,.6212,.1648,.6462
                    ,.2434,.6151,.2161,.6475,.7637,.2217,.7564,.1844,.7821,.171,.0798,.8471,.0811,.8175,.0984,.6151,.0811,.8175,.1281,.7619,.2161,.6475,.2293,.7128,.1329,.2219,.1521,.2164,.7295,.5713,.2293,.7128,.2434,.8561,.1329,.2219,.0943,.0748,.1006,.073,.4563,.8289,.4583,.9001,0,.8792,.0166,.8297,.0567,.8401
                    ,.6444,.9129,.5602,.9129,.5959,.8088,.4807,.7251,.041,.7385,.0754,.6151,.0798,.6162,.6373,.8072,.5959,.8088,.0166,.8297,.041,.7385,.4807,.7251,.5033,.7333,.6274,.5606,.7321,.5889,.7295,.5889,.5602,.5622,.4563,0,.4583,.0017,.4537,.0001,.6336,.7221,.7295,.8478,.6444,.8478,.6779,.7354,.3551,.6151
                    ,.3383,.7257,.3124,.7215,.4243,.5286,.4583,.6139,.3124,.7215,.3383,.7257,.3628,.4557,.4243,.5286,.6779,.7354,.656,.6504,.6833,.6526,.7326,.5795,.7326,.5846,.656,.6504,.6692,.5605,.7564,.5564,.3551,.899,.3522,.8999,.186,.4199,.763,.8689,.186,.4199,.8445,.819,.866,.878,.1592,.3585,.8788,.9338
                    ,.8968,.9021,.3973,.7018,.8472,.0767,.8914,.063,.4093,.6585,.3973,.7018,.8968,.9021,.7295,.5755,.7295,.5713,.7295,.5795,.7295,.5755,.0014,.4934,0,.4891,.0056,.4954,.4098,.8188,.8914,.063,.9963,0,1,.0067
                ]),
                false);

                geo = (_B.Tools.Now - geo) / 1000;
                this.setMaterialByID("map01.Multimaterial#1");
                this.subMeshes = [];
                new _B.SubMesh(0, 0, 36, 0, 96, this);
                new _B.SubMesh(1, 36, 307, 96, 492, this);
                if (scene._selectionOctree) {
                    scene.createOrUpdateSelectionOctree();
                }
            }
            if (this.postConstruction) this.postConstruction();
            load = (_B.Tools.Now - load) / 1000;
            _B.Tools.Log("defined mesh: " + this.name + (cloning ? " (cloned)" : "") + " completed:  " + load.toFixed(2) + ", geometry:  " + geo.toFixed(2) + ", skey:  " + shape.toFixed(2) + " secs");
            if (matLoaded){
                if (typeof this.grandEntrance == "function") this.grandEntrance();
                else makeVisible(this);

            } else waitingMeshes.push(this);
        }

        choinka_002.prototype.dispose = function (doNotRecurse) {
            _super.prototype.dispose.call(this, doNotRecurse);
            if (this.skeleton) this.skeleton.dispose();
        };
        return choinka_002;
    })(BABYLON.Mesh);
    map01.choinka_002 = choinka_002;

    var choinka_001 = (function (_super) {
        __extends(choinka_001, _super);
        function choinka_001(name, scene, materialsRootDir, source) {
            _super.call(this, name, scene, null, source, true);

            if (!materialsRootDir) { materialsRootDir = "./"; }
            defineMaterials(scene, materialsRootDir); //embedded version check
            var cloning = source && source !== null;
            var load = _B.Tools.Now;
            var geo = 0;
            var shape = 0;
            this.position.x  = 5.7178;
            this.position.y  = -.1267;
            this.position.z  = 19.6525;
            this.rotation.x  = 0;
            this.rotation.y  = .8457;
            this.rotation.z  = 0;
            this.scaling.x   = 5.8626;
            this.scaling.y   = 5.8626;
            this.scaling.z   = 5.8626;

            this.id = this.name;
            this.billboardMode  = 0;
            this.isVisible  = false; //always false; evaluated again at bottom
            this.setEnabled(true);
            this.checkCollisions = false;
            this.receiveShadows  = false;
            this.castShadows  = false;
            if (!cloning){
                geo = _B.Tools.Now;
                this.setVerticesData(_B.VertexBuffer.PositionKind, new Float32Array([
                    0,1.0051,0,-.1442,.2075,-.4937,.254,.2075,-.4636,.1442,.2075,.4937,.4636,.2075,.254,-.254,.2075,.4636,-.4937,.2075,.1442,-.4636,.2075,-.254,.4937,.2075,-.1442,0,1.338,0,.2257,.6287,.294,-.0496,.6287,.3777,-.2257,.6287,-.294,-.3777,.6287,-.0496,.0496,.6287,-.3777,.294,.6287,-.2257,.3777,.6287,.0496
                    ,-.294,.6287,.2257,0,1.7097,0,-.0254,1.0005,-.2755,.1818,1.0005,-.2186,.0254,1.0005,.2755,.2186,1.0005,.1818,-.1818,1.0005,.2186,-.2755,1.0005,.0254,-.2186,1.0005,-.1818,.2755,1.0005,-.0254,0,2.0471,0,.1961,1.3379,-.0814,.2017,1.3379,.0833,-.1961,1.3379,.0814,-.0833,1.3379,.2017,-.2017,1.3379,-.0833,-.0814,1.3379,-.1961
                    ,.0833,1.3379,-.2017,.0814,1.3379,.1961,.0644,.0667,0,.0883,.0283,.0499,.0456,.0667,.0456,0,.0667,.0644,.0406,.3562,.0406,.0456,.0667,.0456,.0644,.0667,0,.0504,-.0079,-.0504,.0713,-.0079,0,.0406,.3562,.0406,.0644,.0667,0,.0456,.0667,.0456,0,-.0079,-.0575,.0427,-.009,-.0693,.0188,-.009,-.0792
                    ,.0575,.3562,0,.0456,.0667,-.0456,.0644,.0667,0,-.0456,.0667,-.0456,-.0859,.0312,-.1032,0,.0667,-.0644,.0406,.3562,-.0406,0,.0667,-.0644,-.0406,-.0079,-.0406,-.1034,-.0054,-.0674,-.0713,-.0079,0,0,.3562,-.0575,-.0456,.0667,-.0456,0,.0667,-.0644,-.0644,.0667,0,-.0504,-.0079,.0504,-.0713,-.0079,0
                    ,-.0406,.3562,-.0406,-.0456,.0667,-.0456,-.0575,.3562,0,0,.3562,-.0575,.0575,.3562,0,-.0504,-.0079,.0504,-.0604,.0127,.147,0,-.0079,.0575,-.0406,.3562,.0406,-.0456,.0667,.0456,.0988,.0283,.0245,.0644,.0667,0,-.0406,.3562,.0406,-.0456,.0667,.0456,.0406,-.0079,.0406,.0427,.0348,-.0693,.0439,.0278,-.1275
                    ,.0615,.0278,-.127,.0504,-.0079,-.0504,.0427,.0348,-.0693,.0427,-.009,-.0693,0,.0667,-.0644,.0427,.0348,-.0693,0,-.0079,-.0575,.0188,.0348,-.0792,0,.0667,-.0644,.0439,-.002,-.1275,.0537,.0001,-.2666,.0439,.0278,-.1275,.0188,-.009,-.0792,.0439,.0278,-.1275,.0427,.0348,-.0693,.0615,-.002,-.127,.0427,-.009,-.0693
                    ,.0439,-.002,-.1275,.0595,.0001,-.2664,.0537,-.0097,-.2666,.0595,-.0097,-.2664,.0595,.0001,-.2664,.0595,-.0097,-.2664,.0615,-.002,-.127,.0537,-.0097,-.2666,.0439,-.002,-.1275,.0537,.0001,-.2666,.0595,.0001,-.2664,-.1021,-.0054,-.0889,-.1647,-.0065,-.1199,-.1759,-.0065,-.1176,-.1823,-.0065,-.108,-.1034,.0312,-.0674,-.1021,.0312,-.0889
                    ,-.0713,-.0079,0,-.1034,.0312,-.0674,-.0644,.0667,0,-.0859,-.0054,-.1032,0,-.0079,-.0575,-.0859,.0312,-.1032,-.0859,-.0054,-.1032,-.1759,.013,-.1176,-.2674,-.0024,-.2488,-.2661,-.0024,-.2507,-.1823,-.0065,-.108,-.2674,-.0024,-.2488,-.1823,.013,-.108,-.0859,-.0054,-.1032,-.1647,.013,-.1199,-.1647,-.0065,-.1199,-.1034,-.0054,-.0674
                    ,-.1034,.0312,-.0674,-.1823,.013,-.108,-.1647,.013,-.1199,-.2638,-.0024,-.2512,-.2661,-.0064,-.2507,-.2638,-.0064,-.2512,-.2661,-.0024,-.2507,-.2674,-.0064,-.2488,-.2661,-.0064,-.2507,-.2638,-.0024,-.2512,-.1647,.013,-.1199,-.2674,-.0064,-.2488,-.2638,-.0064,-.2512,-.2661,-.0064,-.2507,-.1647,-.0065,-.1199,-.0786,.0127,.1329,-.114,.0109,.2109
                    ,-.114,-.0133,.2109,-.0786,.0518,.1329,0,.0667,.0644,-.0604,.0127,.147,-.0604,.0518,.147,0,.0667,.0644,-.0786,.0518,.1329,-.0456,.0667,.0456,-.114,-.0133,.2109,-.12,-.0088,.2948,-.0999,-.0133,.2133,-.0786,.0518,.1329,-.0999,.0109,.2133,-.114,.0109,.2109,-.0786,.0127,.1329,-.0604,.0127,.147,-.0999,.0109,.2133
                    ,-.1227,-.0042,.2943,-.12,-.0088,.2948,-.1227,-.0088,.2943,-.0999,-.0133,.2133,-.12,-.0042,.2948,-.0999,.0109,.2133,-.1227,-.0042,.2943,-.1227,-.0088,.2943,-.1227,-.0042,.2943,-.114,.0109,.2109,.0883,-.0183,.0499,.1152,-.0116,.0834,.1297,-.0116,.0703,.1308,-.0116,.0508,.0988,-.0183,.0245,0,-.0079,.0575,.063,.0283,.0604
                    ,.063,-.0183,.0604,.063,-.0183,.0604,.0456,.0667,.0456,.0713,-.0079,0,.1152,-.0116,.0834,.2343,-.0106,.0865,.2343,-.0175,.0865,.1297,.0215,.0703,.2376,-.0106,.0797,.2374,-.0106,.0837,.1152,.0215,.0834,.063,.0283,.0604,.0988,-.0183,.0245,.1308,.0215,.0508,.1308,.0215,.0508,.1152,.0215,.0834,.1152,-.0116,.0834
                    ,.2374,-.0106,.0837,.2376,-.0175,.0797,.2374,-.0175,.0837,.2343,-.0106,.0865,.2343,-.0175,.0865,.2376,-.0175,.0797,.2343,-.0175,.0865,.2374,-.0175,.0837,.2343,-.0106,.0865,.1308,-.0116,.0508,.2376,-.0106,.0797,.0988,.0283,.0245,0,.3562,.0575,.0644,.0667,0,.0406,.3562,.0406,.0575,.3562,0,.0644,.0667,0
                    ,.0504,-.0079,-.0504,0,.3562,-.0575,0,.0667,-.0644,-.0456,.0667,-.0456,-.0575,.3562,0,.0575,.3562,0,.0406,.3562,.0406,0,.3562,.0575,0,.3562,.0575,-.0406,.3562,.0406,-.0406,.3562,-.0406,0,.3562,-.0575,0,.3562,-.0575,.0406,.3562,-.0406,.0575,.3562,0,.0575,.3562,0,0,.3562,.0575
                    ,-.0504,-.0079,.0504,-.0786,.0127,.1329,-.0575,.3562,0,.0988,-.0183,.0245,-.0406,.3562,.0406,-.0504,-.0079,.0504,.0713,-.0079,0,.0504,-.0079,-.0504,.0504,-.0079,-.0504,-.0504,-.0079,.0504,.0188,.0348,-.0792,.0504,-.0079,-.0504,.0456,.0667,-.0456,.0427,.0348,-.0693,0,.0667,-.0644,.0188,.0348,-.0792,.0427,.0348,-.0693
                    ,0,-.0079,-.0575,.0188,-.009,-.0792,.0537,-.0097,-.2666,.0188,-.009,-.0792,.0439,.0278,-.1275,.0427,.0348,-.0693,.0615,.0278,-.127,.0615,-.002,-.127,.0439,-.002,-.1275,.0537,.0001,-.2666,.0615,.0278,-.127,.0595,.0001,-.2664,.0615,-.002,-.127,.0595,-.0097,-.2664,.0537,-.0097,-.2666,.0537,.0001,-.2666,-.0644,.0667,0
                    ,-.0713,-.0079,0,-.1034,-.0054,-.0674,-.1034,.0312,-.0674,0,-.0079,-.0575,0,.0667,-.0644,-.0859,.0312,-.1032,-.1823,.013,-.108,-.1823,-.0065,-.108,-.2674,-.0064,-.2488,-.2674,-.0024,-.2488,-.0859,-.0054,-.1032,-.0859,.0312,-.1032,-.1034,-.0054,-.0674,-.1823,-.0065,-.108,-.1823,.013,-.108,-.1647,.013,-.1199,-.2661,-.0024,-.2507
                    ,-.2661,-.0024,-.2507,-.2674,-.0024,-.2488,-.2638,-.0024,-.2512,-.2661,-.0064,-.2507,-.2674,-.0064,-.2488,-.2638,-.0064,-.2512,-.1647,-.0065,-.1199,0,.0667,.0644,0,-.0079,.0575,-.0604,.0127,.147,0,.0667,.0644,-.0604,.0518,.147,-.0786,.0518,.1329,-.114,-.0133,.2109,-.1227,-.0088,.2943,-.0786,.0518,.1329,-.0604,.0518,.147
                    ,-.0786,.0127,.1329,-.114,-.0133,.2109,-.0604,.0127,.147,-.0999,-.0133,.2133,-.0999,.0109,.2133,-.12,-.0042,.2948,-.12,-.0088,.2948,-.0999,-.0133,.2133,-.12,-.0088,.2948,-.1227,-.0042,.2943,-.12,-.0042,.2948,-.1227,-.0042,.2943,.063,-.0183,.0604,0,-.0079,.0575,.063,-.0183,.0604,.0456,.0667,.0456,.0883,.0283,.0499
                    ,.0713,-.0079,0,.1152,-.0116,.0834,.1152,.0215,.0834,.1308,.0215,.0508,.0988,-.0183,.0245,.1308,-.0116,.0508,.0988,.0283,.0245,.1308,.0215,.0508,.1152,.0215,.0834,.2374,-.0106,.0837,.2376,-.0106,.0797,.2343,-.0106,.0865,.2374,-.0106,.0837,.2374,-.0175,.0837,.2376,-.0175,.0797,.2343,-.0175,.0865,.2343,-.0106,.0865
                    ,.1308,-.0116,.0508,.2376,-.0175,.0797,.2376,-.0106,.0797
                ]),
                false);

                var _i;//indices & affected indices for shapekeys
                _i = new Uint32Array(588);
                _i.set([0,1,2,3,0,4,5,6,0,6,7,0,0,3,5,2,8,0,0,7,1,4,0,8,9,10,11,12,9,13,14,15,9,15,16,9,9,12,14,11,17,9,9,16,10,13,9,17,18,19
                ,20,21,18,22,23,24,18,24,25,18,18,21,23,20,26,18,18,25,19,22,18,26,27,28,29,30,27,31,32,33,27,33,34,27,27,30,32,29,35,27,27,34,28,31,27]);
                CONTIG(_i, 95, 35, 58);
                _i.set([52], 119);
                CONTIG(_i, 120, 59, 68);
                _i.set([65,69,70,71,72,73,74,75,65,76,77,44,78,79,80,39,81,48,59,82,83,84,85,86,87,88,89,90,52,91,92,93,94,95,96,97,98,92,99,100,101,49,102,50,103,104,105,100,106,107
                ,108,109,110,85,111,112,113,114,115,113,116,60,54,117,118,119,120,121,59,122,113], 130);
                CONTIG(_i, 201, 123, 135);
                _i.set([131,136,118,137,126,118,138,55,139,140,141,142,143,144,126,145,146,115,147,116,115,148,149,150,139,141,151,152,153,66,154,151], 214);
                CONTIG(_i, 246, 155, 167);
                _i.set([163,74,168,169,157,170,171,172,173,174,175,153,176,177,165,178,179,180,181,182,180,183,184,185,186,187,82,188,180,189,186,39,190,180,184,191,192,193,194,195,196,37,197,198,199,200,78,37,201,194
                ,187,202,203,204,205,206,207,206,208,182,209,183,182,210,211,194,212,197,213,214,200,36,215,37,39,216,40,217,52,43,218,219,220,48,221,49,51,57,52,54,118,55,57,222,223,59,113,60,62,68
                ,224,65,77,66,68,225,65,226,227,228,229,230,70,70,231,232,233,234,235,236,237,70,238,239,74,65,240,76,44,241,78,242,216,39,243,75,59,82,244,245,246,48,82,59,61,247,75,82,59,83
                ,248,84,249,250,251,252,253,254,255,256,92,94,257,95,258,94,259,260,261,100,49,262,263,103,264,104,100,265,266,267,268,269,85,84,270,113,122,114,113,115,116,54,271,117,272,273,274,59,48,122
                ,275,276,277,126,278,127,279,280,281,282,283,133,284,285,131,118,117,286,118,126,287,139,288,140,289,290,143,126,128,291,115,292,293,115,114,294,295,133,139,151,154,152,66,77,154,296,297,298,299,300
                ,301,302,303,162,304,305,165,306,307,163,308,309,310,170,311,312,313,314,174,153,152,315,165,316,317,180,318,181,180,182,183,319,39,186,82,75,320,321,322,186,323,82,180,324,325,192,194,326,195,37
                ,194,197,327,328,200,37,329,330,187,186,331,332,333,205,334,335,206,182,336,337,182,181,338,194,196], 259);
                CONTIG(_i, 584, 339, 342);
                this.setIndices(_i);

                this.setVerticesData(_B.VertexBuffer.NormalKind, new Float32Array([
                    0,1,0,-.2356,.5419,-.8067,.4005,.5524,-.731,.2356,.5419,.8067,.731,.5524,.4005,-.4005,.5524,.731,-.8067,.5419,.2356,-.731,.5524,-.4005,.8067,.5419,-.2356,0,1,0,.5398,.4631,.703,-.1147,.4731,.8735,-.5398,.4631,-.703,-.8735,.4731,-.1147,.1147,.4731,-.8735,.703,.4631,-.5398,.8735,.4731,.1147
                    ,-.703,.4631,.5398,0,1,0,-.0855,.3634,-.9277,.5933,.3721,-.7138,.0855,.3634,.9277,.7138,.3721,.5933,-.5933,.3721,.7138,-.9277,.3634,.0855,-.7138,.3721,-.5933,.9277,.3634,-.0855,0,1,0,.8847,.2868,-.3675,.8834,.294,.3649,-.8847,.2868,.3675,-.3649,.294,.8834,-.8834,.294,-.3649,-.3675,.2868,-.8847
                    ,.3649,.294,-.8834,.3675,.2868,.8847,.9662,.2155,-.1416,.3014,.9177,.2588,.6101,.3539,.7089,.2338,.2617,.9364,.5437,.6392,.5437,.6101,.3539,.7089,.9662,.2155,-.1416,.6847,-.6853,-.2481,.499,-.7212,-.4805,.5437,.6392,.5437,.9662,.2155,-.1416,.6101,.3539,.7089,-.0928,-.886,-.4544,.5923,-.805,-.0349,-.5332,-.7487,-.3938
                    ,.769,.6392,0,.7568,.1592,-.6339,.9662,.2155,-.1416,-.5728,.6019,-.5564,.0981,.5493,-.8298,.053,.23,-.9717,.5437,.6392,-.5437,.053,.23,-.9717,-.0126,-.9998,-.0148,-.4623,-.7775,.4264,-.6606,-.6894,.2973,0,.6392,-.769,-.5728,.6019,-.5564,.053,.23,-.9717,-.9687,.1924,.1569,-.6093,-.7868,.0983,-.6606,-.6894,.2973
                    ,-.5437,.6392,-.5437,-.5728,.6019,-.5564,-.769,.6392,0,0,.6392,-.769,.769,.6392,0,-.6093,-.7868,.0983,.6658,-.6399,.3838,.1871,-.8462,.499,-.5437,.6392,.5437,-.8509,.3116,.423,.7224,.516,-.4603,.9662,.2155,-.1416,-.5437,.6392,.5437,-.8509,.3116,.423,-.0911,-.9823,-.1635,.8112,.4844,-.3275,-.6011,.7408,-.2997
                    ,.7327,.6804,.0126,.6847,-.6853,-.2481,.8112,.4844,-.3275,.5923,-.805,-.0349,.053,.23,-.9717,.8112,.4844,-.3275,-.0928,-.886,-.4544,-.4493,.4492,-.7722,.053,.23,-.9717,-.6444,-.7328,-.2185,-.5559,.5141,-.6532,-.6011,.7408,-.2997,-.5332,-.7487,-.3938,-.6011,.7408,-.2997,.8112,.4844,-.3275,.7515,-.6521,.1001,.5923,-.805,-.0349
                    ,-.6444,-.7328,-.2185,.5915,.5141,-.6211,-.5451,-.597,-.5886,.5771,-.597,-.5572,.5915,.5141,-.6211,.5771,-.597,-.5572,.7515,-.6521,.1001,-.5451,-.597,-.5886,-.6444,-.7328,-.2185,-.5559,.5141,-.6532,.5915,.5141,-.6211,-.0027,-1,-.0007,.3311,-.801,-.4988,.0037,-1,.0042,-.5141,-.653,.5561,-.7129,.6067,.3515,-.2751,.9485,-.1569
                    ,-.6606,-.6894,.2973,-.7129,.6067,.3515,-.9687,.1924,.1569,.2464,-.6692,-.701,-.0928,-.886,-.4544,.0981,.5493,-.8298,.2464,-.6692,-.701,-.0952,.9879,-.1223,-.8233,.5666,-.0334,-.4484,.6003,-.6622,-.5141,-.653,.5561,-.8233,.5666,-.0334,-.5959,.6179,.5129,.2464,-.6692,-.701,.2417,.6733,-.6987,.3311,-.801,-.4988,-.4623,-.7775,.4264
                    ,-.7129,.6067,.3515,-.5959,.6179,.5129,.2417,.6733,-.6987,.2745,.5666,-.7768,-.4355,-.6299,-.6431,.281,-.604,-.7458,-.4484,.6003,-.6622,-.7968,-.604,-.0158,-.4355,-.6299,-.6431,.2745,.5666,-.7768,.2417,.6733,-.6987,-.7968,-.604,-.0158,.281,-.604,-.7458,-.4355,-.6299,-.6431,.3311,-.801,-.4988,-.7125,-.6444,-.2774,-.782,.6226,-.0298
                    ,-.6645,-.7031,-.2532,-.7155,.6953,-.0673,.2338,.2617,.9364,.6658,-.6399,.3838,.4044,.7185,.5658,.2338,.2617,.9364,-.7155,.6953,-.0673,-.8509,.3116,.423,-.6645,-.7031,-.2532,.4445,-.5635,.6962,.6206,-.7745,.1223,-.7155,.6953,-.0673,.5821,.6427,.498,-.782,.6226,-.0298,-.7125,-.6444,-.2774,.6658,-.6399,.3838,.5821,.6427,.498
                    ,-.6658,.5213,.5337,.4445,-.5635,.6962,-.6544,-.5635,.5042,.6206,-.7745,.1223,.4452,.5213,.728,.5821,.6427,.498,-.6658,.5213,.5337,-.6544,-.5635,.5042,-.6658,.5213,.5337,-.782,.6226,-.0298,-.01,-.9999,-.0044,-.131,-.6233,.7709,.017,-.9998,.0032,.3678,-.7232,-.5845,.3597,-.7607,-.5402,.1871,-.8462,.499,.0462,.3166,.9474
                    ,-.246,-.8334,.4948,-.246,-.8334,.4948,.6101,.3539,.7089,.499,-.7212,-.4805,-.131,-.6233,.7709,.3478,.4827,.8037,.2482,-.6589,.71,.2134,.9687,.1265,.7305,.4858,-.4799,.7669,.5336,.3565,-.0778,.6307,.7721,.0462,.3166,.9474,.3597,-.7607,-.5402,.4516,.7245,-.5207,.4516,.7245,-.5207,-.0778,.6307,.7721,-.131,-.6233,.7709
                    ,.7669,.5336,.3565,.6376,-.6075,-.4736,.6865,-.6475,.3306,.3478,.4827,.8037,.2482,-.6589,.71,.6376,-.6075,-.4736,.2482,-.6589,.71,.6865,-.6475,.3306,.3478,.4827,.8037,.3678,-.7232,-.5845,.7305,.4858,-.4799,.7224,.516,-.4603,0,.6392,.769,.9662,.2155,-.1416,.5437,.6392,.5437,.769,.6392,0,.9662,.2155,-.1416
                    ,.6847,-.6853,-.2481,0,.6392,-.769,.053,.23,-.9717,-.5728,.6019,-.5564,-.769,.6392,0,.769,.6392,0,.5437,.6392,.5437,0,.6392,.769,0,.6392,.769,-.5437,.6392,.5437,-.5437,.6392,-.5437,0,.6392,-.769,0,.6392,-.769,.5437,.6392,-.5437,.769,.6392,0,.769,.6392,0,0,.6392,.769
                    ,-.6093,-.7868,.0983,-.7125,-.6444,-.2774,-.769,.6392,0,.3597,-.7607,-.5402,-.5437,.6392,.5437,-.6093,-.7868,.0983,.499,-.7212,-.4805,.6847,-.6853,-.2481,.6847,-.6853,-.2481,-.6093,-.7868,.0983,-.4493,.4492,-.7722,.6847,-.6853,-.2481,.7568,.1592,-.6339,.8112,.4844,-.3275,.053,.23,-.9717,-.4493,.4492,-.7722,.8112,.4844,-.3275
                    ,-.0928,-.886,-.4544,-.5332,-.7487,-.3938,-.5451,-.597,-.5886,-.5332,-.7487,-.3938,-.6011,.7408,-.2997,.8112,.4844,-.3275,.7327,.6804,.0126,.7515,-.6521,.1001,-.6444,-.7328,-.2185,-.5559,.5141,-.6532,.7327,.6804,.0126,.5915,.5141,-.6211,.7515,-.6521,.1001,.5771,-.597,-.5572,-.5451,-.597,-.5886,-.5559,.5141,-.6532,-.9687,.1924,.1569
                    ,-.6606,-.6894,.2973,-.4623,-.7775,.4264,-.7129,.6067,.3515,-.0928,-.886,-.4544,.053,.23,-.9717,.0981,.5493,-.8298,-.5959,.6179,.5129,-.5141,-.653,.5561,-.7968,-.604,-.0158,-.8233,.5666,-.0334,.2464,-.6692,-.701,.0981,.5493,-.8298,-.4623,-.7775,.4264,-.5141,-.653,.5561,-.5959,.6179,.5129,.2417,.6733,-.6987,-.4484,.6003,-.6622
                    ,-.4484,.6003,-.6622,-.8233,.5666,-.0334,.2745,.5666,-.7768,-.4355,-.6299,-.6431,-.7968,-.604,-.0158,.281,-.604,-.7458,.3311,-.801,-.4988,.2338,.2617,.9364,.1871,-.8462,.499,.6658,-.6399,.3838,.2338,.2617,.9364,.4044,.7185,.5658,-.7155,.6953,-.0673,-.6645,-.7031,-.2532,-.6544,-.5635,.5042,-.7155,.6953,-.0673,.4044,.7185,.5658
                    ,-.7125,-.6444,-.2774,-.6645,-.7031,-.2532,.6658,-.6399,.3838,.6206,-.7745,.1223,.5821,.6427,.498,.4452,.5213,.728,.4445,-.5635,.6962,.6206,-.7745,.1223,.4445,-.5635,.6962,-.6658,.5213,.5337,.4452,.5213,.728,-.6658,.5213,.5337,-.246,-.8334,.4948,.1871,-.8462,.499,-.246,-.8334,.4948,.6101,.3539,.7089,.3014,.9177,.2588
                    ,.499,-.7212,-.4805,-.131,-.6233,.7709,-.0778,.6307,.7721,.4516,.7245,-.5207,.3597,-.7607,-.5402,.3678,-.7232,-.5845,.7224,.516,-.4603,.4516,.7245,-.5207,-.0778,.6307,.7721,.7669,.5336,.3565,.7305,.4858,-.4799,.3478,.4827,.8037,.7669,.5336,.3565,.6865,-.6475,.3306,.6376,-.6075,-.4736,.2482,-.6589,.71,.3478,.4827,.8037
                    ,.3678,-.7232,-.5845,.6376,-.6075,-.4736,.7305,.4858,-.4799
                ]),
                false);

                this.setVerticesData(_B.VertexBuffer.UVKind, new Float32Array([
                    .5,.5,.9547,.5,.8219,.8219,.0453,.5,.1781,.8219,.1781,.1781,.5,.0453,.8219,.1781,.5,.9547,.5,.5,.9547,.5,.8219,.8219,.0453,.5,.1781,.8219,.1781,.1781,.5,.0453,.8219,.1781,.5,.9547,.5,.5,.9547,.5,.8219,.8219,.0453,.5,.1781,.8219,.1781,.1781,.5,.0453
                    ,.8219,.1781,.5,.9547,.5,.5,.9547,.5,.8219,.8219,.0453,.5,.1781,.8219,.1781,.1781,.5,.0453,.8219,.1781,.5,.9547,.4184,.6151,.3781,.6598,.3625,.6174,.8051,.7983,.9953,.5388,.8445,.819,.8509,.1792,.7749,.1231,.817,.1043,.2466,.6151,.2994,.9304,.2434,.9304,.2207,.278,.1704,.2776
                    ,.1938,.2605,1,.4598,.8129,.1961,.8509,.1792,.5129,.8884,.5394,.8148,.5602,.9171,.9661,.4749,.7637,.2217,.2703,.2843,.3314,.2385,.3158,.3185,.6593,0,.4903,.2723,.4583,.2497,.5354,.3042,.5227,.3962,.4875,.3713,.6878,.0202,.4903,.2723,.1229,.9411,.1582,.8593,.2434,.8932,.3076,.3774,.3469,.4758
                    ,.2543,.399,.7564,.0687,.5671,.3266,.8722,.1213,.8509,.1792,.9167,.4977,.7564,.773,.2048,.3926,.4277,.6151,.4382,.6779,.4184,.6807,.1648,.6462,.2161,.6475,.1686,.6619,.7637,.2217,.7821,.171,.0798,.8471,.1307,.8215,.1648,.8471,.0943,.7591,.1095,.616,.1281,.7619,.0811,.8175,.1281,.7619,.2161,.6475
                    ,.1969,.7226,.1686,.6619,.1521,.2164,.7355,.5711,.7295,.5606,.7355,.5605,.2434,.8561,.2328,.8593,.1329,.2219,.1006,.073,.1521,.2164,.4563,.8289,.4498,.8299,.3236,.2162,.3832,.1661,.3963,.1653,.406,.1737,.4947,.8216,.5156,.8093,0,.8792,.0567,.8401,.0798,.9076,.3017,.2058,.6444,.9129,.5959,.8088
                    ,.6373,.8072,.4937,.7248,.5557,.5605,.5583,.5605,.041,.7385,.0798,.6162,.0624,.744,.6373,.8072,.6115,.7229,.6336,.7221,.0166,.8297,.0567,.8401,.4807,.7251,.5033,.7333,.6276,.5626,.6319,.5605,.6321,.5625,.7321,.5889,.7295,.5846,.7321,.5846,.5602,.5622,.5033,.7333,.4583,.0017,.4537,.0001,.4563,0
                    ,.6336,.7221,.616,.4343,.693,.4912,.6767,.5125,.6424,.4,.7295,.8478,.6779,.7354,.7223,.7391,.3551,.6151,.3124,.7215,.2994,.6204,.4243,.5286,.4555,.6151,.4096,.5351,.3124,.7215,.3323,.8102,.3169,.8151,.3628,.4557,.6779,.7354,.6833,.6526,.7295,.5795,.7326,.5846,.7295,.5846,.656,.6504,.6745,.5609
                    ,.6833,.6526,.7564,.5564,.7532,.5605,.3522,.8999,.3169,.8151,.1551,.416,.1354,.4586,.1157,.4489,.1088,.4287,.1361,.3922,.763,.8689,.8441,.8664,.8189,.9111,.186,.4199,.8445,.819,.1592,.3585,.8788,.9338,.9953,.9934,.9915,1,.3768,.7097,.4184,.8189,.4141,.8205,.3564,.7014,.3551,.6396,.8472,.0767
                    ,.9092,.0947,.3973,.7018,.8968,.9021,.8788,.9338,.7295,.5755,.7374,.5713,.7374,.5755,.7295,.5795,.7374,.5795,0,.4891,.0056,.4954,.0014,.4934,.4098,.8188,.8914,.063,1,.0067,.4093,.6585,.9602,.5203,.8509,.1792,.2466,.6151,.2966,.6151,.2994,.9304,.1674,.2995,.9222,.4977,.7637,.2217,.4903,.2723
                    ,.728,.0487,.2434,.8932,.2434,.9411,.2081,.975,.2081,.975,.1582,.975,.1229,.8932,.1582,.8593,.1582,.8593,.2081,.8593,.2434,.8932,.2434,.8932,.2081,.975,.3076,.3774,.3628,.4557,.728,.0487,.8472,.0767,.9167,.4977,.3076,.3774,.1592,.3585,.1674,.2995,.1674,.2995,.3076,.3774,.4563,.6212,.1648,.6462
                    ,.2434,.6151,.2161,.6475,.7637,.2217,.7564,.1844,.7821,.171,.0798,.8471,.0811,.8175,.0984,.6151,.0811,.8175,.1281,.7619,.2161,.6475,.2293,.7128,.1329,.2219,.1521,.2164,.7295,.5713,.2293,.7128,.2434,.8561,.1329,.2219,.0943,.0748,.1006,.073,.4563,.8289,.4583,.9001,0,.8792,.0166,.8297,.0567,.8401
                    ,.6444,.9129,.5602,.9129,.5959,.8088,.4807,.7251,.041,.7385,.0754,.6151,.0798,.6162,.6373,.8072,.5959,.8088,.0166,.8297,.041,.7385,.4807,.7251,.5033,.7333,.6274,.5606,.7321,.5889,.7295,.5889,.5602,.5622,.4563,0,.4583,.0017,.4537,.0001,.6336,.7221,.7295,.8478,.6444,.8478,.6779,.7354,.3551,.6151
                    ,.3383,.7257,.3124,.7215,.4243,.5286,.4583,.6139,.3124,.7215,.3383,.7257,.3628,.4557,.4243,.5286,.6779,.7354,.656,.6504,.6833,.6526,.7326,.5795,.7326,.5846,.656,.6504,.6692,.5605,.7564,.5564,.3551,.899,.3522,.8999,.186,.4199,.763,.8689,.186,.4199,.8445,.819,.866,.878,.1592,.3585,.8788,.9338
                    ,.8968,.9021,.3973,.7018,.8472,.0767,.8914,.063,.4093,.6585,.3973,.7018,.8968,.9021,.7295,.5755,.7295,.5713,.7295,.5795,.7295,.5755,.0014,.4934,0,.4891,.0056,.4954,.4098,.8188,.8914,.063,.9963,0,1,.0067
                ]),
                false);

                geo = (_B.Tools.Now - geo) / 1000;
                this.setMaterialByID("map01.Multimaterial#2");
                this.subMeshes = [];
                new _B.SubMesh(0, 0, 36, 0, 96, this);
                new _B.SubMesh(1, 36, 307, 96, 492, this);
                if (scene._selectionOctree) {
                    scene.createOrUpdateSelectionOctree();
                }
            }
            if (this.postConstruction) this.postConstruction();
            load = (_B.Tools.Now - load) / 1000;
            _B.Tools.Log("defined mesh: " + this.name + (cloning ? " (cloned)" : "") + " completed:  " + load.toFixed(2) + ", geometry:  " + geo.toFixed(2) + ", skey:  " + shape.toFixed(2) + " secs");
            if (matLoaded){
                if (typeof this.grandEntrance == "function") this.grandEntrance();
                else makeVisible(this);

            } else waitingMeshes.push(this);
        }

        choinka_001.prototype.dispose = function (doNotRecurse) {
            _super.prototype.dispose.call(this, doNotRecurse);
            if (this.skeleton) this.skeleton.dispose();
        };
        return choinka_001;
    })(BABYLON.Mesh);
    map01.choinka_001 = choinka_001;

    var Plane = (function (_super) {
        __extends(Plane, _super);
        function Plane(name, scene, materialsRootDir, source) {
            _super.call(this, name, scene, null, source, true);

            if (!materialsRootDir) { materialsRootDir = "./"; }
            defineMaterials(scene, materialsRootDir); //embedded version check
            var cloning = source && source !== null;
            var load = _B.Tools.Now;
            var geo = 0;
            var shape = 0;
            this.position.x  = 0;
            this.position.y  = 0;
            this.position.z  = 0;
            this.rotation.x  = 0;
            this.rotation.y  = 0;
            this.rotation.z  = 0;
            this.scaling.x   = 150;
            this.scaling.y   = 50.1348;
            this.scaling.z   = 150;

            this.id = this.name;
            this.billboardMode  = 0;
            this.isVisible  = false; //always false; evaluated again at bottom
            this.setEnabled(true);
            this.checkCollisions = false;
            this.receiveShadows  = false;
            this.castShadows  = false;
            if (!cloning){
                geo = _B.Tools.Now;
                this.setVerticesData(_B.VertexBuffer.PositionKind, new Float32Array([
                    1,0,-1,-1,0,1,-1,0,-1,1,0,1
                ]),
                false);

                var _i;//indices & affected indices for shapekeys
                _i = new Uint32Array([0,1,2,0,3,1]);
                this.setIndices(_i);

                this.setVerticesData(_B.VertexBuffer.NormalKind, new Float32Array([
                    0,1,0,0,1,0,0,1,0,0,1,0
                ]),
                false);

                this.setVerticesData(_B.VertexBuffer.UVKind, new Float32Array([
                    0,0,1,1,0,1,1,0
                ]),
                false);

                geo = (_B.Tools.Now - geo) / 1000;
                this.setMaterialByID("map01.ground");
                this.subMeshes = [];
                new _B.SubMesh(0, 0, 4, 0, 6, this);
                if (scene._selectionOctree) {
                    scene.createOrUpdateSelectionOctree();
                }
            }
            if (this.postConstruction) this.postConstruction();
            load = (_B.Tools.Now - load) / 1000;
            _B.Tools.Log("defined mesh: " + this.name + (cloning ? " (cloned)" : "") + " completed:  " + load.toFixed(2) + ", geometry:  " + geo.toFixed(2) + ", skey:  " + shape.toFixed(2) + " secs");
            if (matLoaded){
                if (typeof this.grandEntrance == "function") this.grandEntrance();
                else makeVisible(this);

            } else waitingMeshes.push(this);
        }

        Plane.prototype.dispose = function (doNotRecurse) {
            _super.prototype.dispose.call(this, doNotRecurse);
            if (this.skeleton) this.skeleton.dispose();
        };
        return Plane;
    })(BABYLON.Mesh);
    map01.Plane = Plane;

    var choinka = (function (_super) {
        __extends(choinka, _super);
        function choinka(name, scene, materialsRootDir, source) {
            _super.call(this, name, scene, null, source, true);

            if (!materialsRootDir) { materialsRootDir = "./"; }
            defineMaterials(scene, materialsRootDir); //embedded version check
            var cloning = source && source !== null;
            var load = _B.Tools.Now;
            var geo = 0;
            var shape = 0;
            this.position.x  = 0;
            this.position.y  = -.1267;
            this.position.z  = 19.6525;
            this.rotation.x  = 0;
            this.rotation.y  = 0;
            this.rotation.z  = 0;
            this.scaling.x   = 7.393;
            this.scaling.y   = 7.393;
            this.scaling.z   = 7.393;

            this.id = this.name;
            this.billboardMode  = 0;
            this.isVisible  = false; //always false; evaluated again at bottom
            this.setEnabled(true);
            this.checkCollisions = false;
            this.receiveShadows  = false;
            this.castShadows  = false;
            if (!cloning){
                geo = _B.Tools.Now;
                this.setVerticesData(_B.VertexBuffer.PositionKind, new Float32Array([
                    0,1.0051,0,-.1442,.2075,-.4937,.254,.2075,-.4636,.1442,.2075,.4937,.4636,.2075,.254,-.254,.2075,.4636,-.4937,.2075,.1442,-.4636,.2075,-.254,.4937,.2075,-.1442,0,1.338,0,.2257,.6287,.294,-.0496,.6287,.3777,-.2257,.6287,-.294,-.3777,.6287,-.0496,.0496,.6287,-.3777,.294,.6287,-.2257,.3777,.6287,.0496
                    ,-.294,.6287,.2257,0,1.7097,0,-.0254,1.0005,-.2755,.1818,1.0005,-.2186,.0254,1.0005,.2755,.2186,1.0005,.1818,-.1818,1.0005,.2186,-.2755,1.0005,.0254,-.2186,1.0005,-.1818,.2755,1.0005,-.0254,0,2.0471,0,.1961,1.3379,-.0814,.2017,1.3379,.0833,-.1961,1.3379,.0814,-.0833,1.3379,.2017,-.2017,1.3379,-.0833,-.0814,1.3379,-.1961
                    ,.0833,1.3379,-.2017,.0814,1.3379,.1961,.0644,.0667,0,.0883,.0283,.0499,.0456,.0667,.0456,0,.0667,.0644,.0406,.3562,.0406,.0456,.0667,.0456,.0644,.0667,0,.0504,-.0079,-.0504,.0713,-.0079,0,.0406,.3562,.0406,.0644,.0667,0,.0456,.0667,.0456,0,-.0079,-.0575,.0427,-.009,-.0693,.0188,-.009,-.0792
                    ,.0575,.3562,0,.0456,.0667,-.0456,.0644,.0667,0,-.0456,.0667,-.0456,-.0859,.0312,-.1032,0,.0667,-.0644,.0406,.3562,-.0406,0,.0667,-.0644,-.0406,-.0079,-.0406,-.1034,-.0054,-.0674,-.0713,-.0079,0,0,.3562,-.0575,-.0456,.0667,-.0456,0,.0667,-.0644,-.0644,.0667,0,-.0504,-.0079,.0504,-.0713,-.0079,0
                    ,-.0406,.3562,-.0406,-.0456,.0667,-.0456,-.0575,.3562,0,0,.3562,-.0575,.0575,.3562,0,-.0504,-.0079,.0504,-.0604,.0127,.147,0,-.0079,.0575,-.0406,.3562,.0406,-.0456,.0667,.0456,.0988,.0283,.0245,.0644,.0667,0,-.0406,.3562,.0406,-.0456,.0667,.0456,.0406,-.0079,.0406,.0427,.0348,-.0693,.0439,.0278,-.1275
                    ,.0615,.0278,-.127,.0504,-.0079,-.0504,.0427,.0348,-.0693,.0427,-.009,-.0693,0,.0667,-.0644,.0427,.0348,-.0693,0,-.0079,-.0575,.0188,.0348,-.0792,0,.0667,-.0644,.0439,-.002,-.1275,.0537,.0001,-.2666,.0439,.0278,-.1275,.0188,-.009,-.0792,.0439,.0278,-.1275,.0427,.0348,-.0693,.0615,-.002,-.127,.0427,-.009,-.0693
                    ,.0439,-.002,-.1275,.0595,.0001,-.2664,.0537,-.0097,-.2666,.0595,-.0097,-.2664,.0595,.0001,-.2664,.0595,-.0097,-.2664,.0615,-.002,-.127,.0537,-.0097,-.2666,.0439,-.002,-.1275,.0537,.0001,-.2666,.0595,.0001,-.2664,-.1021,-.0054,-.0889,-.1647,-.0065,-.1199,-.1759,-.0065,-.1176,-.1823,-.0065,-.108,-.1034,.0312,-.0674,-.1021,.0312,-.0889
                    ,-.0713,-.0079,0,-.1034,.0312,-.0674,-.0644,.0667,0,-.0859,-.0054,-.1032,0,-.0079,-.0575,-.0859,.0312,-.1032,-.0859,-.0054,-.1032,-.1759,.013,-.1176,-.2674,-.0024,-.2488,-.2661,-.0024,-.2507,-.1823,-.0065,-.108,-.2674,-.0024,-.2488,-.1823,.013,-.108,-.0859,-.0054,-.1032,-.1647,.013,-.1199,-.1647,-.0065,-.1199,-.1034,-.0054,-.0674
                    ,-.1034,.0312,-.0674,-.1823,.013,-.108,-.1647,.013,-.1199,-.2638,-.0024,-.2512,-.2661,-.0064,-.2507,-.2638,-.0064,-.2512,-.2661,-.0024,-.2507,-.2674,-.0064,-.2488,-.2661,-.0064,-.2507,-.2638,-.0024,-.2512,-.1647,.013,-.1199,-.2674,-.0064,-.2488,-.2638,-.0064,-.2512,-.2661,-.0064,-.2507,-.1647,-.0065,-.1199,-.0786,.0127,.1329,-.114,.0109,.2109
                    ,-.114,-.0133,.2109,-.0786,.0518,.1329,0,.0667,.0644,-.0604,.0127,.147,-.0604,.0518,.147,0,.0667,.0644,-.0786,.0518,.1329,-.0456,.0667,.0456,-.114,-.0133,.2109,-.12,-.0088,.2948,-.0999,-.0133,.2133,-.0786,.0518,.1329,-.0999,.0109,.2133,-.114,.0109,.2109,-.0786,.0127,.1329,-.0604,.0127,.147,-.0999,.0109,.2133
                    ,-.1227,-.0042,.2943,-.12,-.0088,.2948,-.1227,-.0088,.2943,-.0999,-.0133,.2133,-.12,-.0042,.2948,-.0999,.0109,.2133,-.1227,-.0042,.2943,-.1227,-.0088,.2943,-.1227,-.0042,.2943,-.114,.0109,.2109,.0883,-.0183,.0499,.1152,-.0116,.0834,.1297,-.0116,.0703,.1308,-.0116,.0508,.0988,-.0183,.0245,0,-.0079,.0575,.063,.0283,.0604
                    ,.063,-.0183,.0604,.063,-.0183,.0604,.0456,.0667,.0456,.0713,-.0079,0,.1152,-.0116,.0834,.2343,-.0106,.0865,.2343,-.0175,.0865,.1297,.0215,.0703,.2376,-.0106,.0797,.2374,-.0106,.0837,.1152,.0215,.0834,.063,.0283,.0604,.0988,-.0183,.0245,.1308,.0215,.0508,.1308,.0215,.0508,.1152,.0215,.0834,.1152,-.0116,.0834
                    ,.2374,-.0106,.0837,.2376,-.0175,.0797,.2374,-.0175,.0837,.2343,-.0106,.0865,.2343,-.0175,.0865,.2376,-.0175,.0797,.2343,-.0175,.0865,.2374,-.0175,.0837,.2343,-.0106,.0865,.1308,-.0116,.0508,.2376,-.0106,.0797,.0988,.0283,.0245,0,.3562,.0575,.0644,.0667,0,.0406,.3562,.0406,.0575,.3562,0,.0644,.0667,0
                    ,.0504,-.0079,-.0504,0,.3562,-.0575,0,.0667,-.0644,-.0456,.0667,-.0456,-.0575,.3562,0,.0575,.3562,0,.0406,.3562,.0406,0,.3562,.0575,0,.3562,.0575,-.0406,.3562,.0406,-.0406,.3562,-.0406,0,.3562,-.0575,0,.3562,-.0575,.0406,.3562,-.0406,.0575,.3562,0,.0575,.3562,0,0,.3562,.0575
                    ,-.0504,-.0079,.0504,-.0786,.0127,.1329,-.0575,.3562,0,.0988,-.0183,.0245,-.0406,.3562,.0406,-.0504,-.0079,.0504,.0713,-.0079,0,.0504,-.0079,-.0504,.0504,-.0079,-.0504,-.0504,-.0079,.0504,.0188,.0348,-.0792,.0504,-.0079,-.0504,.0456,.0667,-.0456,.0427,.0348,-.0693,0,.0667,-.0644,.0188,.0348,-.0792,.0427,.0348,-.0693
                    ,0,-.0079,-.0575,.0188,-.009,-.0792,.0537,-.0097,-.2666,.0188,-.009,-.0792,.0439,.0278,-.1275,.0427,.0348,-.0693,.0615,.0278,-.127,.0615,-.002,-.127,.0439,-.002,-.1275,.0537,.0001,-.2666,.0615,.0278,-.127,.0595,.0001,-.2664,.0615,-.002,-.127,.0595,-.0097,-.2664,.0537,-.0097,-.2666,.0537,.0001,-.2666,-.0644,.0667,0
                    ,-.0713,-.0079,0,-.1034,-.0054,-.0674,-.1034,.0312,-.0674,0,-.0079,-.0575,0,.0667,-.0644,-.0859,.0312,-.1032,-.1823,.013,-.108,-.1823,-.0065,-.108,-.2674,-.0064,-.2488,-.2674,-.0024,-.2488,-.0859,-.0054,-.1032,-.0859,.0312,-.1032,-.1034,-.0054,-.0674,-.1823,-.0065,-.108,-.1823,.013,-.108,-.1647,.013,-.1199,-.2661,-.0024,-.2507
                    ,-.2661,-.0024,-.2507,-.2674,-.0024,-.2488,-.2638,-.0024,-.2512,-.2661,-.0064,-.2507,-.2674,-.0064,-.2488,-.2638,-.0064,-.2512,-.1647,-.0065,-.1199,0,.0667,.0644,0,-.0079,.0575,-.0604,.0127,.147,0,.0667,.0644,-.0604,.0518,.147,-.0786,.0518,.1329,-.114,-.0133,.2109,-.1227,-.0088,.2943,-.0786,.0518,.1329,-.0604,.0518,.147
                    ,-.0786,.0127,.1329,-.114,-.0133,.2109,-.0604,.0127,.147,-.0999,-.0133,.2133,-.0999,.0109,.2133,-.12,-.0042,.2948,-.12,-.0088,.2948,-.0999,-.0133,.2133,-.12,-.0088,.2948,-.1227,-.0042,.2943,-.12,-.0042,.2948,-.1227,-.0042,.2943,.063,-.0183,.0604,0,-.0079,.0575,.063,-.0183,.0604,.0456,.0667,.0456,.0883,.0283,.0499
                    ,.0713,-.0079,0,.1152,-.0116,.0834,.1152,.0215,.0834,.1308,.0215,.0508,.0988,-.0183,.0245,.1308,-.0116,.0508,.0988,.0283,.0245,.1308,.0215,.0508,.1152,.0215,.0834,.2374,-.0106,.0837,.2376,-.0106,.0797,.2343,-.0106,.0865,.2374,-.0106,.0837,.2374,-.0175,.0837,.2376,-.0175,.0797,.2343,-.0175,.0865,.2343,-.0106,.0865
                    ,.1308,-.0116,.0508,.2376,-.0175,.0797,.2376,-.0106,.0797
                ]),
                false);

                var _i;//indices & affected indices for shapekeys
                _i = new Uint32Array(588);
                _i.set([0,1,2,3,0,4,5,6,0,6,7,0,0,3,5,2,8,0,0,7,1,4,0,8,9,10,11,12,9,13,14,15,9,15,16,9,9,12,14,11,17,9,9,16,10,13,9,17,18,19
                ,20,21,18,22,23,24,18,24,25,18,18,21,23,20,26,18,18,25,19,22,18,26,27,28,29,30,27,31,32,33,27,33,34,27,27,30,32,29,35,27,27,34,28,31,27]);
                CONTIG(_i, 95, 35, 58);
                _i.set([52], 119);
                CONTIG(_i, 120, 59, 68);
                _i.set([65,69,70,71,72,73,74,75,65,76,77,44,78,79,80,39,81,48,59,82,83,84,85,86,87,88,89,90,52,91,92,93,94,95,96,97,98,92,99,100,101,49,102,50,103,104,105,100,106,107
                ,108,109,110,85,111,112,113,114,115,113,116,60,54,117,118,119,120,121,59,122,113], 130);
                CONTIG(_i, 201, 123, 135);
                _i.set([131,136,118,137,126,118,138,55,139,140,141,142,143,144,126,145,146,115,147,116,115,148,149,150,139,141,151,152,153,66,154,151], 214);
                CONTIG(_i, 246, 155, 167);
                _i.set([163,74,168,169,157,170,171,172,173,174,175,153,176,177,165,178,179,180,181,182,180,183,184,185,186,187,82,188,180,189,186,39,190,180,184,191,192,193,194,195,196,37,197,198,199,200,78,37,201,194
                ,187,202,203,204,205,206,207,206,208,182,209,183,182,210,211,194,212,197,213,214,200,36,215,37,39,216,40,217,52,43,218,219,220,48,221,49,51,57,52,54,118,55,57,222,223,59,113,60,62,68
                ,224,65,77,66,68,225,65,226,227,228,229,230,70,70,231,232,233,234,235,236,237,70,238,239,74,65,240,76,44,241,78,242,216,39,243,75,59,82,244,245,246,48,82,59,61,247,75,82,59,83
                ,248,84,249,250,251,252,253,254,255,256,92,94,257,95,258,94,259,260,261,100,49,262,263,103,264,104,100,265,266,267,268,269,85,84,270,113,122,114,113,115,116,54,271,117,272,273,274,59,48,122
                ,275,276,277,126,278,127,279,280,281,282,283,133,284,285,131,118,117,286,118,126,287,139,288,140,289,290,143,126,128,291,115,292,293,115,114,294,295,133,139,151,154,152,66,77,154,296,297,298,299,300
                ,301,302,303,162,304,305,165,306,307,163,308,309,310,170,311,312,313,314,174,153,152,315,165,316,317,180,318,181,180,182,183,319,39,186,82,75,320,321,322,186,323,82,180,324,325,192,194,326,195,37
                ,194,197,327,328,200,37,329,330,187,186,331,332,333,205,334,335,206,182,336,337,182,181,338,194,196], 259);
                CONTIG(_i, 584, 339, 342);
                this.setIndices(_i);

                this.setVerticesData(_B.VertexBuffer.NormalKind, new Float32Array([
                    0,1,0,-.2356,.5419,-.8067,.4005,.5524,-.731,.2356,.5419,.8067,.731,.5524,.4005,-.4005,.5524,.731,-.8067,.5419,.2356,-.731,.5524,-.4005,.8067,.5419,-.2356,0,1,0,.5398,.4631,.703,-.1147,.4731,.8735,-.5398,.4631,-.703,-.8735,.4731,-.1147,.1147,.4731,-.8735,.703,.4631,-.5398,.8735,.4731,.1147
                    ,-.703,.4631,.5398,0,1,0,-.0855,.3634,-.9277,.5933,.3721,-.7138,.0855,.3634,.9277,.7138,.3721,.5933,-.5933,.3721,.7138,-.9277,.3634,.0855,-.7138,.3721,-.5933,.9277,.3634,-.0855,0,1,0,.8847,.2868,-.3675,.8834,.294,.3649,-.8847,.2868,.3675,-.3649,.294,.8834,-.8834,.294,-.3649,-.3675,.2868,-.8847
                    ,.3649,.294,-.8834,.3675,.2868,.8847,.9662,.2155,-.1416,.3014,.9177,.2588,.6101,.3539,.7089,.2338,.2617,.9364,.5437,.6392,.5437,.6101,.3539,.7089,.9662,.2155,-.1416,.6847,-.6853,-.2481,.499,-.7212,-.4805,.5437,.6392,.5437,.9662,.2155,-.1416,.6101,.3539,.7089,-.0928,-.886,-.4544,.5923,-.805,-.0349,-.5332,-.7487,-.3938
                    ,.769,.6392,0,.7568,.1592,-.6339,.9662,.2155,-.1416,-.5728,.6019,-.5564,.0981,.5493,-.8298,.053,.23,-.9717,.5437,.6392,-.5437,.053,.23,-.9717,-.0126,-.9998,-.0148,-.4623,-.7775,.4264,-.6606,-.6894,.2973,0,.6392,-.769,-.5728,.6019,-.5564,.053,.23,-.9717,-.9687,.1924,.1569,-.6093,-.7868,.0983,-.6606,-.6894,.2973
                    ,-.5437,.6392,-.5437,-.5728,.6019,-.5564,-.769,.6392,0,0,.6392,-.769,.769,.6392,0,-.6093,-.7868,.0983,.6658,-.6399,.3838,.1871,-.8462,.499,-.5437,.6392,.5437,-.8509,.3116,.423,.7224,.516,-.4603,.9662,.2155,-.1416,-.5437,.6392,.5437,-.8509,.3116,.423,-.0911,-.9823,-.1635,.8112,.4844,-.3275,-.6011,.7408,-.2997
                    ,.7327,.6804,.0126,.6847,-.6853,-.2481,.8112,.4844,-.3275,.5923,-.805,-.0349,.053,.23,-.9717,.8112,.4844,-.3275,-.0928,-.886,-.4544,-.4493,.4492,-.7722,.053,.23,-.9717,-.6444,-.7328,-.2185,-.5559,.5141,-.6532,-.6011,.7408,-.2997,-.5332,-.7487,-.3938,-.6011,.7408,-.2997,.8112,.4844,-.3275,.7515,-.6521,.1001,.5923,-.805,-.0349
                    ,-.6444,-.7328,-.2185,.5915,.5141,-.6211,-.5451,-.597,-.5886,.5771,-.597,-.5572,.5915,.5141,-.6211,.5771,-.597,-.5572,.7515,-.6521,.1001,-.5451,-.597,-.5886,-.6444,-.7328,-.2185,-.5559,.5141,-.6532,.5915,.5141,-.6211,-.0027,-1,-.0007,.3311,-.801,-.4988,.0037,-1,.0042,-.5141,-.653,.5561,-.7129,.6067,.3515,-.2751,.9485,-.1569
                    ,-.6606,-.6894,.2973,-.7129,.6067,.3515,-.9687,.1924,.1569,.2464,-.6692,-.701,-.0928,-.886,-.4544,.0981,.5493,-.8298,.2464,-.6692,-.701,-.0952,.9879,-.1223,-.8233,.5666,-.0334,-.4484,.6003,-.6622,-.5141,-.653,.5561,-.8233,.5666,-.0334,-.5959,.6179,.5129,.2464,-.6692,-.701,.2417,.6733,-.6987,.3311,-.801,-.4988,-.4623,-.7775,.4264
                    ,-.7129,.6067,.3515,-.5959,.6179,.5129,.2417,.6733,-.6987,.2745,.5666,-.7768,-.4355,-.6299,-.6431,.281,-.604,-.7458,-.4484,.6003,-.6622,-.7968,-.604,-.0158,-.4355,-.6299,-.6431,.2745,.5666,-.7768,.2417,.6733,-.6987,-.7968,-.604,-.0158,.281,-.604,-.7458,-.4355,-.6299,-.6431,.3311,-.801,-.4988,-.7125,-.6444,-.2774,-.782,.6226,-.0298
                    ,-.6645,-.7031,-.2532,-.7155,.6953,-.0673,.2338,.2617,.9364,.6658,-.6399,.3838,.4044,.7185,.5658,.2338,.2617,.9364,-.7155,.6953,-.0673,-.8509,.3116,.423,-.6645,-.7031,-.2532,.4445,-.5635,.6962,.6206,-.7745,.1223,-.7155,.6953,-.0673,.5821,.6427,.498,-.782,.6226,-.0298,-.7125,-.6444,-.2774,.6658,-.6399,.3838,.5821,.6427,.498
                    ,-.6658,.5213,.5337,.4445,-.5635,.6962,-.6544,-.5635,.5042,.6206,-.7745,.1223,.4452,.5213,.728,.5821,.6427,.498,-.6658,.5213,.5337,-.6544,-.5635,.5042,-.6658,.5213,.5337,-.782,.6226,-.0298,-.01,-.9999,-.0044,-.131,-.6233,.7709,.017,-.9998,.0032,.3678,-.7232,-.5845,.3597,-.7607,-.5402,.1871,-.8462,.499,.0462,.3166,.9474
                    ,-.246,-.8334,.4948,-.246,-.8334,.4948,.6101,.3539,.7089,.499,-.7212,-.4805,-.131,-.6233,.7709,.3478,.4827,.8037,.2482,-.6589,.71,.2134,.9687,.1265,.7305,.4858,-.4799,.7669,.5336,.3565,-.0778,.6307,.7721,.0462,.3166,.9474,.3597,-.7607,-.5402,.4516,.7245,-.5207,.4516,.7245,-.5207,-.0778,.6307,.7721,-.131,-.6233,.7709
                    ,.7669,.5336,.3565,.6376,-.6075,-.4736,.6865,-.6475,.3306,.3478,.4827,.8037,.2482,-.6589,.71,.6376,-.6075,-.4736,.2482,-.6589,.71,.6865,-.6475,.3306,.3478,.4827,.8037,.3678,-.7232,-.5845,.7305,.4858,-.4799,.7224,.516,-.4603,0,.6392,.769,.9662,.2155,-.1416,.5437,.6392,.5437,.769,.6392,0,.9662,.2155,-.1416
                    ,.6847,-.6853,-.2481,0,.6392,-.769,.053,.23,-.9717,-.5728,.6019,-.5564,-.769,.6392,0,.769,.6392,0,.5437,.6392,.5437,0,.6392,.769,0,.6392,.769,-.5437,.6392,.5437,-.5437,.6392,-.5437,0,.6392,-.769,0,.6392,-.769,.5437,.6392,-.5437,.769,.6392,0,.769,.6392,0,0,.6392,.769
                    ,-.6093,-.7868,.0983,-.7125,-.6444,-.2774,-.769,.6392,0,.3597,-.7607,-.5402,-.5437,.6392,.5437,-.6093,-.7868,.0983,.499,-.7212,-.4805,.6847,-.6853,-.2481,.6847,-.6853,-.2481,-.6093,-.7868,.0983,-.4493,.4492,-.7722,.6847,-.6853,-.2481,.7568,.1592,-.6339,.8112,.4844,-.3275,.053,.23,-.9717,-.4493,.4492,-.7722,.8112,.4844,-.3275
                    ,-.0928,-.886,-.4544,-.5332,-.7487,-.3938,-.5451,-.597,-.5886,-.5332,-.7487,-.3938,-.6011,.7408,-.2997,.8112,.4844,-.3275,.7327,.6804,.0126,.7515,-.6521,.1001,-.6444,-.7328,-.2185,-.5559,.5141,-.6532,.7327,.6804,.0126,.5915,.5141,-.6211,.7515,-.6521,.1001,.5771,-.597,-.5572,-.5451,-.597,-.5886,-.5559,.5141,-.6532,-.9687,.1924,.1569
                    ,-.6606,-.6894,.2973,-.4623,-.7775,.4264,-.7129,.6067,.3515,-.0928,-.886,-.4544,.053,.23,-.9717,.0981,.5493,-.8298,-.5959,.6179,.5129,-.5141,-.653,.5561,-.7968,-.604,-.0158,-.8233,.5666,-.0334,.2464,-.6692,-.701,.0981,.5493,-.8298,-.4623,-.7775,.4264,-.5141,-.653,.5561,-.5959,.6179,.5129,.2417,.6733,-.6987,-.4484,.6003,-.6622
                    ,-.4484,.6003,-.6622,-.8233,.5666,-.0334,.2745,.5666,-.7768,-.4355,-.6299,-.6431,-.7968,-.604,-.0158,.281,-.604,-.7458,.3311,-.801,-.4988,.2338,.2617,.9364,.1871,-.8462,.499,.6658,-.6399,.3838,.2338,.2617,.9364,.4044,.7185,.5658,-.7155,.6953,-.0673,-.6645,-.7031,-.2532,-.6544,-.5635,.5042,-.7155,.6953,-.0673,.4044,.7185,.5658
                    ,-.7125,-.6444,-.2774,-.6645,-.7031,-.2532,.6658,-.6399,.3838,.6206,-.7745,.1223,.5821,.6427,.498,.4452,.5213,.728,.4445,-.5635,.6962,.6206,-.7745,.1223,.4445,-.5635,.6962,-.6658,.5213,.5337,.4452,.5213,.728,-.6658,.5213,.5337,-.246,-.8334,.4948,.1871,-.8462,.499,-.246,-.8334,.4948,.6101,.3539,.7089,.3014,.9177,.2588
                    ,.499,-.7212,-.4805,-.131,-.6233,.7709,-.0778,.6307,.7721,.4516,.7245,-.5207,.3597,-.7607,-.5402,.3678,-.7232,-.5845,.7224,.516,-.4603,.4516,.7245,-.5207,-.0778,.6307,.7721,.7669,.5336,.3565,.7305,.4858,-.4799,.3478,.4827,.8037,.7669,.5336,.3565,.6865,-.6475,.3306,.6376,-.6075,-.4736,.2482,-.6589,.71,.3478,.4827,.8037
                    ,.3678,-.7232,-.5845,.6376,-.6075,-.4736,.7305,.4858,-.4799
                ]),
                false);

                this.setVerticesData(_B.VertexBuffer.UVKind, new Float32Array([
                    .5,.5,.9547,.5,.8219,.8219,.0453,.5,.1781,.8219,.1781,.1781,.5,.0453,.8219,.1781,.5,.9547,.5,.5,.9547,.5,.8219,.8219,.0453,.5,.1781,.8219,.1781,.1781,.5,.0453,.8219,.1781,.5,.9547,.5,.5,.9547,.5,.8219,.8219,.0453,.5,.1781,.8219,.1781,.1781,.5,.0453
                    ,.8219,.1781,.5,.9547,.5,.5,.9547,.5,.8219,.8219,.0453,.5,.1781,.8219,.1781,.1781,.5,.0453,.8219,.1781,.5,.9547,.4184,.6151,.3781,.6598,.3625,.6174,.8051,.7983,.9953,.5388,.8445,.819,.8509,.1792,.7749,.1231,.817,.1043,.2466,.6151,.2994,.9304,.2434,.9304,.2207,.278,.1704,.2776
                    ,.1938,.2605,1,.4598,.8129,.1961,.8509,.1792,.5129,.8884,.5394,.8148,.5602,.9171,.9661,.4749,.7637,.2217,.2703,.2843,.3314,.2385,.3158,.3185,.6593,0,.4903,.2723,.4583,.2497,.5354,.3042,.5227,.3962,.4875,.3713,.6878,.0202,.4903,.2723,.1229,.9411,.1582,.8593,.2434,.8932,.3076,.3774,.3469,.4758
                    ,.2543,.399,.7564,.0687,.5671,.3266,.8722,.1213,.8509,.1792,.9167,.4977,.7564,.773,.2048,.3926,.4277,.6151,.4382,.6779,.4184,.6807,.1648,.6462,.2161,.6475,.1686,.6619,.7637,.2217,.7821,.171,.0798,.8471,.1307,.8215,.1648,.8471,.0943,.7591,.1095,.616,.1281,.7619,.0811,.8175,.1281,.7619,.2161,.6475
                    ,.1969,.7226,.1686,.6619,.1521,.2164,.7355,.5711,.7295,.5606,.7355,.5605,.2434,.8561,.2328,.8593,.1329,.2219,.1006,.073,.1521,.2164,.4563,.8289,.4498,.8299,.3236,.2162,.3832,.1661,.3963,.1653,.406,.1737,.4947,.8216,.5156,.8093,0,.8792,.0567,.8401,.0798,.9076,.3017,.2058,.6444,.9129,.5959,.8088
                    ,.6373,.8072,.4937,.7248,.5557,.5605,.5583,.5605,.041,.7385,.0798,.6162,.0624,.744,.6373,.8072,.6115,.7229,.6336,.7221,.0166,.8297,.0567,.8401,.4807,.7251,.5033,.7333,.6276,.5626,.6319,.5605,.6321,.5625,.7321,.5889,.7295,.5846,.7321,.5846,.5602,.5622,.5033,.7333,.4583,.0017,.4537,.0001,.4563,0
                    ,.6336,.7221,.616,.4343,.693,.4912,.6767,.5125,.6424,.4,.7295,.8478,.6779,.7354,.7223,.7391,.3551,.6151,.3124,.7215,.2994,.6204,.4243,.5286,.4555,.6151,.4096,.5351,.3124,.7215,.3323,.8102,.3169,.8151,.3628,.4557,.6779,.7354,.6833,.6526,.7295,.5795,.7326,.5846,.7295,.5846,.656,.6504,.6745,.5609
                    ,.6833,.6526,.7564,.5564,.7532,.5605,.3522,.8999,.3169,.8151,.1551,.416,.1354,.4586,.1157,.4489,.1088,.4287,.1361,.3922,.763,.8689,.8441,.8664,.8189,.9111,.186,.4199,.8445,.819,.1592,.3585,.8788,.9338,.9953,.9934,.9915,1,.3768,.7097,.4184,.8189,.4141,.8205,.3564,.7014,.3551,.6396,.8472,.0767
                    ,.9092,.0947,.3973,.7018,.8968,.9021,.8788,.9338,.7295,.5755,.7374,.5713,.7374,.5755,.7295,.5795,.7374,.5795,0,.4891,.0056,.4954,.0014,.4934,.4098,.8188,.8914,.063,1,.0067,.4093,.6585,.9602,.5203,.8509,.1792,.2466,.6151,.2966,.6151,.2994,.9304,.1674,.2995,.9222,.4977,.7637,.2217,.4903,.2723
                    ,.728,.0487,.2434,.8932,.2434,.9411,.2081,.975,.2081,.975,.1582,.975,.1229,.8932,.1582,.8593,.1582,.8593,.2081,.8593,.2434,.8932,.2434,.8932,.2081,.975,.3076,.3774,.3628,.4557,.728,.0487,.8472,.0767,.9167,.4977,.3076,.3774,.1592,.3585,.1674,.2995,.1674,.2995,.3076,.3774,.4563,.6212,.1648,.6462
                    ,.2434,.6151,.2161,.6475,.7637,.2217,.7564,.1844,.7821,.171,.0798,.8471,.0811,.8175,.0984,.6151,.0811,.8175,.1281,.7619,.2161,.6475,.2293,.7128,.1329,.2219,.1521,.2164,.7295,.5713,.2293,.7128,.2434,.8561,.1329,.2219,.0943,.0748,.1006,.073,.4563,.8289,.4583,.9001,0,.8792,.0166,.8297,.0567,.8401
                    ,.6444,.9129,.5602,.9129,.5959,.8088,.4807,.7251,.041,.7385,.0754,.6151,.0798,.6162,.6373,.8072,.5959,.8088,.0166,.8297,.041,.7385,.4807,.7251,.5033,.7333,.6274,.5606,.7321,.5889,.7295,.5889,.5602,.5622,.4563,0,.4583,.0017,.4537,.0001,.6336,.7221,.7295,.8478,.6444,.8478,.6779,.7354,.3551,.6151
                    ,.3383,.7257,.3124,.7215,.4243,.5286,.4583,.6139,.3124,.7215,.3383,.7257,.3628,.4557,.4243,.5286,.6779,.7354,.656,.6504,.6833,.6526,.7326,.5795,.7326,.5846,.656,.6504,.6692,.5605,.7564,.5564,.3551,.899,.3522,.8999,.186,.4199,.763,.8689,.186,.4199,.8445,.819,.866,.878,.1592,.3585,.8788,.9338
                    ,.8968,.9021,.3973,.7018,.8472,.0767,.8914,.063,.4093,.6585,.3973,.7018,.8968,.9021,.7295,.5755,.7295,.5713,.7295,.5795,.7295,.5755,.0014,.4934,0,.4891,.0056,.4954,.4098,.8188,.8914,.063,.9963,0,1,.0067
                ]),
                false);

                geo = (_B.Tools.Now - geo) / 1000;
                this.setMaterialByID("map01.Multimaterial#3");
                this.subMeshes = [];
                new _B.SubMesh(0, 0, 36, 0, 96, this);
                new _B.SubMesh(1, 36, 307, 96, 492, this);
                if (scene._selectionOctree) {
                    scene.createOrUpdateSelectionOctree();
                }
            }
            if (this.postConstruction) this.postConstruction();
            load = (_B.Tools.Now - load) / 1000;
            _B.Tools.Log("defined mesh: " + this.name + (cloning ? " (cloned)" : "") + " completed:  " + load.toFixed(2) + ", geometry:  " + geo.toFixed(2) + ", skey:  " + shape.toFixed(2) + " secs");
            if (matLoaded){
                if (typeof this.grandEntrance == "function") this.grandEntrance();
                else makeVisible(this);

            } else waitingMeshes.push(this);
        }

        choinka.prototype.dispose = function (doNotRecurse) {
            _super.prototype.dispose.call(this, doNotRecurse);
            if (this.skeleton) this.skeleton.dispose();
        };
        return choinka;
    })(BABYLON.Mesh);
    map01.choinka = choinka;

    function defineLights(scene, positionOffset) {
        if (!positionOffset) { positionOffset = null; }
        var light;

        light = new _B.PointLight("Lamp", new _B.Vector3(0,8.23,-.1445), scene);
        if (positionOffset) light.position.addInPlace(positionOffset);
        light.intensity = 1.5;
        light.diffuse = new _B.Color3(1,1,1);
        light.specular = new _B.Color3(1,1,1);
    }
    map01.defineLights = defineLights;

    function freshenShadowRenderLists(scene) {
        var renderList = [];
        for (var i = 0; i < scene.meshes.length; i++){
            if (scene.meshes[i]["castShadows"])
                renderList.push(scene.meshes[i]);
        }

        for (var i = 0; i < scene.lights.length; i++){
            if (scene.lights[i]._shadowGenerator)
                scene.lights[i]._shadowGenerator.getShadowMap().renderList = renderList;
        }
    }
    map01.freshenShadowRenderLists = freshenShadowRenderLists;
})(map01 || (map01 = {}));